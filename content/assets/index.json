{
  "api-getting-started": {
    "title": "Getting Started",
    "order": 1,
    "preview": "Remember, you can refer to the full, self-updating, documentation …",
    "content": "\n\nRemember, you can refer to the full, self-updating, documentation [here](https://api.exceptionless.io). But let's get started with some real examples to get you authenticated, which will allow access to other endpoints. Exceptionless protects your account by requiring authentication which takes the form of a `Bearer` Authorization header.\n\nBefore we generate a user-scoped token, let's talk a little bit about scopes. \n\n## Authentication Scopes\n\nWhen you eventually create an API Key/token for your project, you will need to pass in a scope (if you are creating this token programmatically). Exceptionless recognizes two scopes: \n\n* user\n* client\n\nThe `user` scope has full admin access to the account. This scope creates a token that can do everything from create projects to update billing info. \n\nThe `client` scope has access to post events, getting events, and reading the client configuration for a project.\n\n## Get Your User Scoped Token\n\nBefore you can post project-specific events and make project-specific API requests, you'll need to first generate a user token which can then be used to generate tokens for your projects. It is incredibly important to protect user-scoped tokens as they act as the keys to the kingdom. **Never let anyone else access your user token**.\n\n*NOTE: If you signed up using an OAuth flow with Google or something else, you will need to create a local login to be able to use this endpoint.* \n\nLet's take a look at an example. \n\nPOST `/api/v2/auth/login`  \n\n```\ncurl --location --request POST \"https://api.exceptionless.com/api/v2/auth/login\" \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"email\": YOUR_EMAIL,\n    \"password\": PASSWORD\n}'\n```\n\nYour response should look like this: \n\n```\n{\n    \"token\": \"ojcQ1YVtKBnFITzJB3RFkdWRaVGdghHZoHvGKbx4\"\n}\n```\n\nNow that you have your token, you can get your project-specific API key (or token) which will allow you to execute API requests against a specific project. It's worth also noting that you can easily update your requests to authenticate via a URL query string and your access token.\n\nFor example, if we want to view our organizations, we simply navigate to <https://api.exceptionless.io/api/v2/organizations>, add the query string `?access_token={token}` rather than a Bearer token authorization header.\n\n---\n\n[Next > Getting Project Tokens](project-tokens.md) {.text-right}",
    "basename": "api-getting-started",
    "path": "./content/docs/api/api-getting-started.md"
  },
  "getting-events": {
    "title": "Getting Events",
    "order": 4,
    "preview": "There may be times where you need to access the events you've sent …",
    "content": "\n\nThere may be times where you need to access the events you've sent through to Exceptionless without going through the Exceptionless UI. For those situations, you can use the API to fetch events. You can specify events across your organization or specific to a project. Let's take a look at the options. \n\n*Note: organization-level requests require your [Scoped User Token](api-getting-started) while projects-specific requests can use your [Project Token](project-tokens).*\n\n### Get Count of All Events\n\nGET `api/v2/events/count` \n\n```\ncurl --location --request GET \"https://api.exceptionless.com/api/v2/events/count\" \\\n--header 'Authorization: Bearer YOUR_SCOPED_USER_TOKEN'\n``` \n\nThe response will look like this: \n\n```\n{\n    \"total\": 74\n}\n```\n\n### Get Count of All Events For a Single Project  \n\nRemember, you can get your Project ID in the UI when logged in or by [following the instructions here](project-tokens/#get-projects).  \n\nGET `api/v2/projects/YOUR_PROJECT_ID/events/count` \n\n```\ncurl --location --request GET \"https://api.exceptionless.com/api/v2/projects/YOUR_PROJECT_ID/events/count\" \\\n--header 'Authorization: Bearer YOUR_PROJECT_TOKEN'\n```\n\nThe response will be just like the global event search: \n\n```\n{\n    \"total\": 74\n}\n```\n\n### Get All Events For Organization \n\nGET `api/v2/events`  \n\n```\ncurl --location --request GET 'https://api.exceptionless.com/api/v2/events' \\\n--header 'Authorization: Bearer YOUR_SCOPED_USER_TOKEN'\n```\n\nThe default results returned will be pagninated and limited to 10 results per page. However, you can configure the results limit and a bunch of other properties for your search through query string parameters. The full options [are listed here](https://api.exceptionless.io/docs/index.html).\n\nYour response will look like this: \n\n```\n[\n  {\n    \"type\": \"string\",\n    \"source\": \"string\",\n    \"date\": \"2020-11-06T13:57:46.773Z\",\n    \"tags\": [\n      \"string\"\n    ],\n    \"message\": \"string\",\n    \"geo\": \"string\",\n    \"value\": 0,\n    \"count\": 0,\n    \"data\": {},\n    \"referenceId\": \"string\",\n    \"id\": \"string\",\n    \"organizationId\": \"string\",\n    \"projectId\": \"string\",\n    \"stackId\": \"string\",\n    \"isFirstOccurrence\": true,\n    \"createdUtc\": \"2020-11-06T13:57:46.773Z\",\n    \"idx\": {}\n  }\n]\n```\n\n### Get All Events For a Project  \n\nSimilar to getting all events or your organization, you can get all events for a project. You have the same query string filtering capabilities with this request, but we'll keep the example simple. \n\nGET `api/v2/projects/YOUR_PROJECT_ID/events`  \n\n```\ncurl --location --request GET 'https://api.exceptionless.com/api/v2/projects/YOUR_PROJECT_ID/events' \\\n--header 'Authorization: Bearer YOUR_PROJECT_TOKEN'\n```\n\nAgain, the response will look like this: \n\n```\n[\n  {\n    \"type\": \"string\",\n    \"source\": \"string\",\n    \"date\": \"2020-11-06T13:57:46.773Z\",\n    \"tags\": [\n      \"string\"\n    ],\n    \"message\": \"string\",\n    \"geo\": \"string\",\n    \"value\": 0,\n    \"count\": 0,\n    \"data\": {},\n    \"referenceId\": \"string\",\n    \"id\": \"string\",\n    \"organizationId\": \"string\",\n    \"projectId\": \"string\",\n    \"stackId\": \"string\",\n    \"isFirstOccurrence\": true,\n    \"createdUtc\": \"2020-11-06T13:57:46.773Z\",\n    \"idx\": {}\n  }\n]\n```\n\n### Getting an Event by ID  \n\nYou can get the details of a single event by passing in the ID for the event. \n\nGET `api/v2/events/YOUR_EVENT_ID`\n\n```\ncurl --location --request GET 'https://api.exceptionless.com/api/v2/events/YOUR_EVENT_ID' \\\n--header 'Authorization: Bearer YOUR_PROJECT_TOKEN'\n```\n\nThe response will be a single object with the details of the event like this: \n\n```\n{\n  \"type\": \"string\",\n  \"source\": \"string\",\n  \"date\": \"2020-11-06T14:02:45.101Z\",\n  \"tags\": [\n    \"string\"\n  ],\n  \"message\": \"string\",\n  \"geo\": \"string\",\n  \"value\": 0,\n  \"count\": 0,\n  \"data\": {},\n  \"referenceId\": \"string\",\n  \"id\": \"string\",\n  \"organizationId\": \"string\",\n  \"projectId\": \"string\",\n  \"stackId\": \"string\",\n  \"isFirstOccurrence\": true,\n  \"createdUtc\": \"2020-11-06T14:02:45.101Z\",\n  \"idx\": {}\n}\n```\n\n---\n\n[Next > Clients](../clients/index.md) {.text-right}",
    "basename": "getting-events",
    "path": "./content/docs/api/getting-events.md"
  },
  "index": {
    "title": "Self Hosting",
    "order": 19,
    "preview": "Exceptionless can be self-hosted by either manually running the …",
    "content": "\n\nExceptionless can be self-hosted by either manually running the source code for the server and the frontend or by using our simply Docker image.\n\nYou can also use Kubernetes while self-hosting Exceptionless. We'll cover both topics in the following pages.\n\n* [Docker](docker.md)\n* [Kubernetes](kubernetes.md)\n* [Upgrading](upgrading-self-hosted-instance.md)\n\n---\n\n[Next > Docker](docker.md) {.text-right}\n",
    "basename": "index",
    "path": "./content/docs/self-hosting/index.md"
  },
  "posting-events": {
    "title": "Posting Events",
    "order": 3,
    "preview": "This is the meat of what Exceptionless does. This is what you care …",
    "content": "\n\nThis is the meat of what Exceptionless does. This is what you care about. So, let's explore some of the possibilities. \n\nEvents passed through to Exceptionless take three forms: \n\n* [Messages](#posting-messages)  \n* [Logs](#posting-logs)  \n* [Errors](#posting-events)  \n\nWe'll explore how to send through events for each category. First, it's important to remind you that you should not being user-scoped tokens for these API endpoints. If you have not yet generated a client-scoped token, [do so through the UI](../project-settings.md) or [follow the guide here to do so programmatically here](./project-tokens.md).\n\n### Posting Messages\n\nMessages are arbitrary peices of information that can mean or relate to anything. They don't have to be errors or logs. Configuring a message event is simple. \n\nPOST `api/v2/events`  \n\n```\ncurl --location --request POST \"https://api.exceptionless.com/api/v2/events\" \\\n--header 'Authorization: Bearer YOUR_PROJECT_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"message\": \"Exceptionless is amazing!\" }'\n```\n\nYou will receive a `202` response if the message was successfully posted. You can check out your Exceptionless dashboard to immediately see this message show up. \n\n\n### Posting Logs  \n\nLogs will generally have a little more information associated with them than messages. Logs can take fields like date, message, and name. Let's take a look at an example. \n\nPOST `api/v2/events` \n\n```\ncurl --location --request POST \"https://api.exceptionless.com/api/v2/events\" \\\n--header 'Authorization: Bearer YOUR_PROJECT_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"type\": \"log\", \"message\": \"Exceptionless is amazing!\", \"date\":\"2030-01-01T12:00:00.0000000-05:00\", \"@user\":{ \"identity\":\"123456789\", \"name\": \"Test User\" } }'\n```\n\nYou will receive a `202` response if the log was successfully posted. You can check out your Exceptionless dashboard to immediately see this log show up. \n\n### Posting Errors  \n\nErrors will generally be the most comprehensive events you send through to Exceptionless. They contain many details about the problems your users are facing. Let's take a look at the fields you'll need to provide and how to submit errors. \n\nPOST `api/v2/events` \n\n```\ncurl --location --request POST \"https://api.exceptionless.com/api/v2/events\" \\\n--header 'Authorization: Bearer YOUR_PROJECT_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"type\": \"error\", \"date\":\"2030-01-01T12:00:00.0000000-05:00\", \"@simple_error\": { \"message\": \"Simple Exception\", \"type\": \"System.Exception\", \"stack_trace\": \" at Client.Tests.ExceptionlessClientTests.CanSubmitSimpleException() in ExceptionlessClientTests.cs:line 77\" } }'\n```\n\nWith an error event, you will be able to explore additional details for your event through Exceptionless's dashboard. These additional details include the full stack trace if you provided it. \n\nNext up, we'll take a look at how we fetch events. \n\n---\n\n[Next > Getting Events](getting-events.md) {.text-right}",
    "basename": "posting-events",
    "path": "./content/docs/api/posting-events.md"
  },
  "project-tokens": {
    "title": "Client-Scoped Tokens",
    "order": 2,
    "preview": "You'll likely want your events associated with a specific project, …",
    "content": "\n\nYou'll likely want your events associated with a specific project, and you may want to fetch data from a specific project. To ensure this, you need to generate a project-specific API key (or token). You can do this in the Exceptionless interface by clicking the All Projects link in the navigation header, then hover over the project name and click the gear icon. On the Settings page, you'll see a tab for API Keys. You can generate a token there. \n\nHowever, you can programmatically generate these tokens as well. Let's use the [User Scoped Token](api-getting-started.md) you generated previously to get a list of projects.\n\n### Get Projects \n\nGET `api/v2/projects`  \n\n```\ncurl --location --request GET \"https://api.exceptionless.com/api/v2/projects\" \\\n--header 'Authorization: Bearer YOUR_USER_SCOPED_TOKEN'\n```\n\nThe response to this request will be an array of all of your projects that looks like this: \n\n```\n[\n    {\n        \"id\": \"YOUR PROJECT ID\",\n        \"created_utc\": \"2016-01-11T20:05:59.7185672\",\n        \"organization_id\": \"YOUR ORG ID\",\n        \"organization_name\": \"YOUR ORG NAME\",\n        \"name\": \"YOUR PROJECT NAME\",\n        \"delete_bot_data_enabled\": false,\n        \"is_configured\": true,\n        \"stack_count\": 0,\n        \"event_count\": 0,\n        \"has_premium_features\": true,\n        \"has_slack_integration\": false\n    }\n]\n```\n\nYou'll need the `id` field from this response to generate your new project-specific token. Let's generate that now. In addition to using the project ID, we will also need to pass in scopes for the token. In this case, we are going to pass in the `client` scope which provides access to post events and read events, but doesn't provide full user-token access. [Read more about scopes here](./api-getting-started.md).\n\n### Generate Client-Scoped Token\n\nPOST `api/v2/projects/PROJECT_ID`  \n\n```\ncurl --location --request POST \"https://api.exceptionless.com/api/v2/projects/YOUR_PROJECT_ID/tokens\" \\\n--header 'Authorization: Bearer YOUR_USER_SCOPED_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"scopes\": [\n        \"client\"\n    ]\n}'\n```\n\nThe response you'll receive will look like this: \n\n```\n{\n    \"id\": \"TOKEN\",\n    \"organization_id\": \"YOUR_ORG_ID\",\n    \"project_id\": \"YOUR_PROJECT_ID\",\n    \"scopes\": [\n        \"client\"\n    ],\n    \"is_disabled\": false,\n    \"created_utc\": \"2020-11-05T14:02:54.1866886Z\",\n    \"updated_utc\": \"2020-11-05T14:02:54.1867055Z\"\n}\n```\n\nThis `TOKEN` can now be used as your API key in Bearer authorization headers for subsequent API requests related to your project. \n\n---\n\n[Next > Posting Events](posting-events.md) {.text-right}",
    "basename": "project-tokens",
    "path": "./content/docs/api/project-tokens.md"
  },
  "bulk-actions": {
    "title": "Bulk Actions",
    "order": 5,
    "preview": "Bulk Actions is the ability to select multiple exceptions or …",
    "content": "\nBulk Actions is the ability to select multiple exceptions or occurrences of a single exception and do with them as you please, all at once. Simply select multiple occurrences, click the \"Bulk Actions\" button below the list, and choose your action.\n\n![Exceptionless Bulk Actions Demo](img/exceptionless-bulk-actions.gif)\n\n## Watch the Video!\n\n[![Exceptionless Bulk Actions](img/bulk-actions-video-screenshot.png)](http://www.youtube.com/watch?v=pQXk3ayK8P8)\n\n---\n\n[Next > Project Settings](project-settings.md) {.text-right}",
    "basename": "bulk-actions",
    "path": "./content/docs/bulk-actions.md"
  },
  "client-configuration-values": {
    "title": "Client Configuration Values",
    "order": 2,
    "parent": "JS",
    "preview": "- [About](#about)\n- [Usage Example](#usage-example)\n- [Updating …",
    "content": "\n- [About](#about)\n- [Usage Example](#usage-example)\n- [Updating Client Configuration settings](#updating-client-configuration-settings)\n- [Subscribing to Client Configuration Setting changes](#subscribing-to-client-configuration-setting-changes)\n\n## About\n\n[Read about client configuration and view in-depth examples](../../project-settings.md)\n\n## Usage Example\n\nThe below example demonstrates **how we would turn on or off log event submissions at runtime** without redeploying the app or changing server config settings.\n\nFirst, we add a (completely arbitrary for this example) `enableLogSubmission` client configuration value key with value `true` in the Project's Settings in the Exceptionless dashboard.\n\n![Exceptionless Client Configuration Value](../../../assets/img/docs/client-configuration.png)\n\nThen, we register a new client side plugin that runs each time an event is created. If our key (`enableLogSubmission`) is set to false and the event type is set to log, we will discard the event.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n   c.addPlugin('Conditionally cancel log submission', 100, (context) => {\n      var enableLogSubmission = context.client.config.settings['enableLogSubmission'];\n\n      // only cancel event submission if it’s a log event and\n      // enableLogSubmission is set to a value and the value is not true.\n      if (context.event.type === 'log' && (!!enableLogSubmission && enableLogSubmission !== 'true')) {\n         context.cancelled = true;\n      }\n   });\n});\n```\n\n***\n\n## Updating Client Configuration settings\n\n![Exceptionless Client Configuration Settings](../../../assets/img/docs/client-configuration.png)\n\nAll project settings are synced to the client in almost real time. When an event is submitted to Exceptionless we send down a response header with the current configuration version. If a newer version is available we will immediately retrieve and apply the latest configuration.\n\nBy default the client will check after `5 seconds` on client startup (*if no events are submitted on startup*) and then every `2 minutes` after the last event submission for updated configuration settings.\n\n- Checking for updated settings doesn't count towards plan limits.\n- Only the current configuration version is sent when checking for updated settings (no user information will ever be sent).\n- If the settings haven't changed, then no settings will be retrieved.\n\nYou can also **turn off the automatic updating of configuration settings when idle** using the code below.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n   c.updateSettingsWhenIdleInterval = -1;\n});\n```\n\nYou can also manually update the configuration settings using the code below.\n\n```js\nimport { Exceptionless, SettingsManager } from \"@exceptionless/browser\";\n\nawait SettingsManager.updateSettings(Exceptionless.config);\n```\n\n## Subscribing to Client Configuration Setting changes\n\nTo be notified when client configuration settings change, subscribe to them using the below code.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n   c.subscribeServerSettingsChange((configuration) => {\n      // configuration.settings contains the new settings\n   });\n});\n```\n\n***\n\n[Next > Sending Events](sending-events.md) {.text-right}\n",
    "basename": "client-configuration-values",
    "path": "./content/docs/clients/javascript/client-configuration-values.md"
  },
  "configuration": {
    "title": "Configuration",
    "order": 1,
    "parent": ".NET",
    "preview": "There are a few ways to configure Exceptionless in your project. …",
    "content": "\n\nThere are a few ways to configure Exceptionless in your project. We'll cover them here or you can jump to app-specific examples: [Console App Example](guides/console-apps-example.md), [Web Server Example](guides/web-server-example.md).\n\n---\n\n- [ExceptionlessClient Configuration](#exceptionlessclient-configuration)\n  - [Configuring With Code](#configuring-with-code)\n  - [Configuring With Attributes](#configuring-with-attributes)\n  - [Configuring With Environment Variables](#configuring-with-environment-variables)\n  - [Using Web.config](#using-webconfig)\n  - [Available Configuration Options](#available-configuration-options)\n  - [ServerUrl](#serverurl)\n  - [IncludePrivateInformation](#includeprivateinformation)\n  - [Extended Data](#extended-data)\n  - [Default Tags](#default-tags)\n  - [Default Data](#default-data)\n- [Versioning](#versioning)\n- [Offline storage](#offline-storage)\n  - [Configuration File](#configuration-file)\n  - [Code](#code)\n- [Disabling Exceptionless](#disabling-exceptionless)\n  - [Configuration File](#configuration-file-1)\n  - [Attribute](#attribute)\n- [Self Hosted Options](#self-hosted-options)\n  - [Configuration file](#configuration-file-2)\n  - [Attribute](#attribute-1)\n\n## ExceptionlessClient Configuration\n\nYou have a few options for how you might configure your Exceptionless client. Here are some examples of how to do this. \n\n### Configuring With Code\n\nThe examples below show the various ways (configuration file, attributes or code) that Exceptionless can be configured in your application.\n\n```csharp\nusing Exceptionless;\n\nvar client = new ExceptionlessClient(c => {\n    c.ApiKey = \"YOUR_API_KEY\";\n    c.SetVersion(version);\n});\n\n// You can also set the api key directly on the default instance.\nExceptionlessClient.Default.Configuration.ApiKey = \"YOUR_API_KEY\"\n```\n\n### Configuring With Attributes\n\nYou can also configure Exceptionless using attributes like this:\n\n```csharp\nusing Exceptionless.Configuration;\n[assembly: Exceptionless(\"YOUR_API_KEY\")]\n```\n\nThe Exceptionless assembly attribute will only be picked up if it’s defined in the entry or calling assembly. If you have placed the above attribute in different location you’ll need to call the method below during startup.\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.ReadFromAttributes(typeof(MyClass).Assembly)\n```\n\n### Configuring With Environment Variables\n\nYou can also add an Environment variable or application setting with the key name `Exceptionless:ApiKey` and your `YOUR_API_KEY` as the value.\n\n### Using Web.config\n\nExceptionless can be configured using a config section in your web.config or app.config depending on what kind of project you have. Installing the correct NuGet package should automatically add the necessary configuration elements. It should look like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <configSections>\n    <section name=\"exceptionless\" type=\"Exceptionless.ExceptionlessSection, Exceptionless\" />\n  </configSections>\n  <!-- attribute names are cases sensitive -->\n  <exceptionless apiKey=\"API_KEY_HERE\" />\n  ...\n  <system.webServer>\n    <modules>\n      <remove name=\"ExceptionlessModule\" />\n      <add name=\"ExceptionlessModule\" type=\"Exceptionless.Mvc.ExceptionlessModule, Exceptionless.Mvc\" />\n    </modules>\n    ...\n  </system.webServer>\n</configuration>\n```\n\nNow, before you can fully configure your Exceptionless client, it's important to know what options are available for you to configure. We'll cover that below. \n\n### Available Configuration Options\n\nWhen initializing the Exceptionless client, you can set any of the following values: \n\n* ServerUrl\n* IncludePrivateInformation\n* DefaultTags\n* DefaultData\n\n### ServerUrl\n\nThe `ServerUrl` is used when you are self-hosting Exceptionless and need to point your client to your self-hosted server. This one is pretty self-explanatory. \n\n### IncludePrivateInformation\n\nThis is a boolean value that will automatically strip private info like credit card numbers and passwords from being sent in event handling. The default is `true`. However, you can set this value like this: \n\n```cs\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.IncludePrivateInformation = false;\n```\n\nYou can also set it in a global configuration file like this: \n\n```xml\n<exceptionless apiKey=\"YOUR_API_KEY\" includePrivateInformation=\"false\" />\n```\n\n### Extended Data\n\nThe next two properties that can be set when configuring the Exceptionless client can be considered features that extend your data. If you want to apply additional information to every single event that is fired, you would use one of these two settings. \n\n### Default Tags\n\nJust as you are able to apply tags to individual events, you can set default tags that will apply to all events you submit. Configuring this is simple. Here's a quick example: \n\n```cs\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.DefaultTags.Add(\"Tag1\");\n```\n\nYou can also set this up globally with a configuration file like this: \n\n```xml\n<exceptionless apiKey=\"YOUR_API_KEY\" tags=\"Tag1,Tag2\" />\n```\n\n### Default Data\n\nWhen viewing your stacks and individual events, you can see additional information about the events on the Extended Data tab. Data found there is usually passed in by adding info to the data object in the event payload. Here's an example of how you might do that: \n\n```cs\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.DefaultData[\"Data1\"] = \"Exceptionless\";\n```\n\nYou can also configure this with a configuration file like this: \n\n```xml\n<exceptionless apiKey=\"YOUR_API_KEY\">\n    <data>\n      <add name=\"Data1\" value=\"Exceptionless\"/>\n      <add name=\"Data2\" value=\"10\"/>\n      <add name=\"Data3\" value=\"true\"/>\n      <add name=\"Data4\" value=\"{ 'Property1': 'Exceptionless', 'Property2: 10, 'Property3': true }\"/>\n    </data>\n</exceptionless>\n```\n\n## Versioning\n\nBy specifying an application version you can [enable additional functionality](/docs/versioning/). By default, an application version will try to be resolved from assembly attributes.  However, it's a good practice to specify an application version if possible using the code below.\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.SetVersion(\"1.2.3\");\n```\n\n## Offline storage\n\nBy default, Exceptionless keeps events in memory. This means if the application exits before the event can be sent to the server, the event will not be sent on restart. This can be overcome by persisting events to disk.\n\nTo persist events to disk for offline scenarios or to ensure no events are lost between application restarts, you will need to configure your Exceptionless client to know to store the events on disk and to know where to store them. You can simply pass in a configuration value that includes the storage path. When selecting a folder path, make sure that the identity the application is running under has full permissions to that folder.\n\nPlease note that this adds a bit of overhead as events need to be serialized to disk on submission and is not recommended for high throughput logging scenarios.\n\n### Configuration File\n\n```xml\n<!-- Use Folder Storage -->\n<exceptionless apiKey=\"YOUR_API_KEY\" storagePath=\"PATH OR FOLDER NAME\" />\n```\n\n### Code\n\n```csharp\n// Use folder storage\nExceptionlessClient.Default.Configuration.UseFolderStorage(\"PATH OR FOLDER NAME\");\n// Use isolated storage\nExceptionlessClient.Default.Configuration.UseIsolatedStorage();\n```\n\n## Disabling Exceptionless\n\nYou can disable Exceptionless from reporting events during testing using the `Enabled` setting.\n\n### Configuration File\n\n```xml\n<exceptionless apiKey=\"YOUR_API_KEY\" enabled=\"false\" />\n```\n\n### Attribute\n\n```csharp\nusing Exceptionless.Configuration;\n[assembly: Exceptionless(\"YOUR_API_KEY\", Enabled=false)]\n```\n\n## Self Hosted Options\n\nThe Exceptionless client can also be configured to send data to your [self hosted instance](../../self-hosting/index.md). This is configured by setting the `serverUrl` setting to point to your Exceptionless instance.\n\n### Configuration file\n\n```csharp\n<exceptionless apiKey=\"YOUR_API_KEY\" serverUrl=\"http://localhost\" />\n```\n\n### Attribute\n\n```csharp\nusing Exceptionless.Configuration;\n[assembly: Exceptionless(\"YOUR_API_KEY\", ServerUrl = \"http://localhost\")]\n```\n\n---\n[Next > Client Configuration Values](client-configuration-values.md) {.text-right}\n",
    "basename": "configuration",
    "path": "./content/docs/clients/dotnet/configuration.md"
  },
  "console-apps-example": {
    "title": "Console Apps Example",
    "order": 1,
    "preview": "Exceptionless runs in all types of .NET aplications. Let's take a …",
    "content": "\n\nExceptionless runs in all types of .NET aplications. Let's take a look at how to get started with Exceptionless in a console application. First, we'll some configuration out of the way. \n\nTo use Exceptionless, add the Exceptionless namespace like this: `using Exceptionless;` \n\nOnce you've done that, be sure to define the Exceptionless client: \n\n`var client = new ExceptionlessClient(\"YOUR API KEY\");`  \n\nNow you can send events to Exceptionless like this: \n\n`client.SubmitLog(\"Hello World!\");` \n\nOr you can capture exceptions like this: \n\n```csharp\ntry {\n    throw new Exception(\"MyApp error\");\n} catch (Exception ex) {\n    // submit the exception to the Exceptionless server\n    client.SubmitException(ex);\n}\n```\n\nBecause Exceptionless is designed to process events asynchronously in the background via a queue, you may need to make sure the event is processed before the app exits. If this is a requirement for your app, you can handle this situation by telling Exceptionless about it up front with `client.Startup();`, which means Exceptionless knows to force process any events in the queue before allowing the app to exit, or by calling `client.processQueue();` before your application exists. \n\nThere's one additional configuration option that doesn't require defining the client first. If you use the Exceptionless default client, it takes care of of most things for you. Simply load up the Exceptionless default client by calling `Startup` with your API Key, and you're ready to go: \n\n`ExceptionlessClient.Default.Startup(\"Your API Key\");`\n\nWhen you go this route, you can send exceptions to Exceptionless just by calling a `ToExceptionless()` method on the default Exceptionless client. It looks like this: \n\n```csharp\n// configure the default instance\nExceptionlessClient.Default.Startup(\"Your API Key\");\n\ntry {\n    throw new Exception(\"MyApp ToExceptionless error\");\n} catch (Exception ex) {\n    // use ToExceptionless extension method. Uses ExceptionlessClient.Default and requires it to be configured.\n    ex.ToExceptionless().Submit();\n    // don't forget to call Submit.\n}\n```\n\nExceptionless supports a wide range of platforms. For a full list, see the [supported platforms page here](supported-platforms.md).\n\n--- \n\n[Next > Web Server Example](web-server-example.md) {.text-right}",
    "basename": "console-apps-example",
    "path": "./content/docs/clients/dotnet/guides/console-apps-example.md"
  },
  "logging-with-generic-host": {
    "title": "Logging With Generic Host",
    "order": 3,
    "preview": "Microsoft provides a useful tool for logging events called …",
    "content": "\n\nMicrosoft provides a useful tool for logging events called `Microsoft.Extensions.Logging`. You can read up on [how logging works with .NET Core here](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-5.0), but we'll cover how to set up Exceptionless as a logging provider to be used as a generic host. \n\nTo get started, you'll need to make sure you update your `appsettings.json` file for your project. Here's an example configuration that will allow you to use Exceptionless with .NET Core's generic host: \n\n```\n\"Exceptionless\": {\n        \"ApiKey\": \"YOUR API KEY\"\n    },\n    \"Logging\": {\n        \"IncludeScopes\": false,\n        \"LogLevel\": {\n            \"Default\": \"Debug\",\n            \"System\": \"Information\",\n            \"Microsoft\": \"Information\"\n        }\n    }\n```\n\nWith that added, you can add the Exceptionless namespace to any file in your project with `using Exceptionless;`. This then allows you to utilize Exceptionless with dependency injection, or as we're covering here, as a generic host. \n\nIn your `Startup` method, you can read in your configuration file like this: \n\n```\nvar builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build();\n```\n\nThis tells .NET Core to use whatever settings you've provided in the `appsettings.json` file for the logger (it also sets up some other configurations). To ensure Exceptionless is used for logging, you will need to update the `ConfigureServices` method to this: \n\n```\nservices.AddLogging(b => b\n                .AddConfiguration(Configuration.GetSection(\"Logging\"))\n                .AddDebug()\n                .AddConsole()\n                .AddExceptionless());\n```\n\nThis is adding debugging capabilities, console logging, and Exceptionless to your generic host logging configuration.\n\nIf you are using a generic host in a web server application, you may want to capture more information about HTTP requests automatically. To do this, you'll need to edit the `ConfigureServices` method to include the following line: \n\n`services.AddHttpContextAccessor();`\n\nFinally, you'll need to tell the app itself to use Exceptionless. You can do this in your `Configure` method liket his: \n\n`app.useExceptionless(Configuration);`\n\nNow, you have access to send logs, exceptions, and messages to Exceptionless automatically through the generic host configuration. If you'd like to see a full, detailed example, [we have that here](https://github.com/exceptionless/Exceptionless.Net/blob/9e91a51c36d03fcc3bee79a8b6eaee3034ac78b4/samples/Exceptionless.SampleAspNetCore/Startup.cs).\n\n### Exceptionless Configuration Options \n\nOne of the nice things about configuring Exceptionless through `appsettings.json` is you can set up some defaults that will apply to all events sent through to Exceptionless. Let's explore what that might look like. In your `appsettings.json` file, you can add the following to your `Exceptionless` property: \n\n```\n \"DefaultData\": {\n    \"JSON_OBJECT\": \"{ \\\"Name\\\": \\\"John Doe\\\" }\",\n    \"Boolean\": true,\n    \"Number\": 1,\n    \"Array\": \"1,2,3\"\n},\n```\n\nThis is a very simple object that encapsulates default data that will be sent to Exceptionless with every event. The `DefaultData` property can take in any property keys you'd like to pass in. The property values must be strings, booleans, numbers, or arrays. As you can see in the example, a JSON object can simply be stringified. \n\nIn addition to the `DefaultData` property, you can include `DefaultTags` and `Settings`. To include `DefaultTags`, add the following: \n\n```\n\"DefaultTags\": [ \"MySpecialTag\" ]\n```\n\nAs you can probably tell, you can pass in as many tags as you'd like as an array of strings. \n\nTo add custom settings, you would do something like this: \n\n```\n\"Settings\": {\n    \"FeatureXYZEnabled\": false \n}  \n```\n\nThe `Settings` property can take any keys you'd like. The values associated with those keys must be strings, numbers, or booleans.\n\nYou can, of course, customize the default logging, but that is outside the Exceptionless configuration. If you'd like to customize the way things are logged when using the generic host, [follow this guide](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-5.0#configure-logging). \n\n---\n\n[Next > Sending Events](../sending-events.md) {.text-right}",
    "basename": "logging-with-generic-host",
    "path": "./content/docs/clients/dotnet/guides/logging-with-generic-host.md"
  },
  "web-server-example": {
    "title": "Web Server Example",
    "order": 2,
    "preview": "Exceptionless runs great in all sorts of environments. Let's take a …",
    "content": "\n\nExceptionless runs great in all sorts of environments. Let's take a look at how you might set up Exceptionless to work with your .NET web server. \n\nTo get started, be sure to include the Exceptionless namespace wherever you plan to use it. You can do that like this: `using Exceptionless;`\n\nThe simplest example of using Exceptionless in your web server is to include a try/catch block that leverages Exceptionless in the catch. It might look something like this: \n\n```csharp\n[HttpGet(\"{id}\")]\npublic ActionResult<User> GetUser(string id)\n{\n    try {\n        var user = userService.GetUser(id);\n        return Ok(user);\n    } catch (Exception ex) {\n        ex.ToExceptionless().SetProperty(\"UserId\", id).Submit();\n        return NotFound();\n    }\n}\n```\n\nShould the request to `FetchUser()`, or whatever your method is, happen to throw, the Exceptionless client will pick it up and send the exception to your dashboard. \n\nOf course, Exceptionless is more than just error handling. You can leverage any of the Exceptionless event methods [documented here](sending-events.md) through the client interface. \n\nExceptionless can be configured as a generic host for your web server. In your `Startup.cs` file, you would include the following within the `ConfigureServices` method: \n\n```csharp\nservices.AddHttpContextAccessor();\n```\n\nBy adding this helper method, Exceptionless is able to gather more information about the request including the API endpoint that threw the error, user-agent information, and more. \n\nThen in your `Configure` method, you would add: \n\n```csharp\napp.UseExceptionless(Configuration);\n```\n\nTo get access to your Exceptionless configuration (which we'll explain next), you'll need to do create a `builder` variable in your `Startup` method and build the configuration like this: \n\n```csharp\nvar builder = new ConfigurationBuilder()\n        .SetBasePath(env.ContentRootPath)\n        .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n        .AddEnvironmentVariables();\nConfiguration = builder.Build();\n```\n\nThis gives your server application access to any configuration you've set in your `appsettings.json` file. And that's exactly where we will configure Exceptionless. So, go ahead and open that file and we can create some configuration for your Exceptionless client: \n\n```json\n \"Exceptionless\": {\n    \"ApiKey\": \"YOUR API KEY\",\n    \"ServerUrl\": \"http://localhost:50000\",\n    \"DefaultData\": {\n        \"JSON_OBJECT\": \"{ \\\"Name\\\": \\\"Alice\\\" }\",\n        \"Boolean\": true,\n        \"Number\": 1,\n        \"Array\": \"1,2,3\"\n    },\n    \"DefaultTags\": [ \"SOME_TAG\" ],\n    \"Settings\": {\n        \"FeatureXYZEnabled\": false \n    }  \n},\n```\n\nYou will only pass in the `ServerUrl` if you are self-hosting Exceptionless. You'll use this to point to your correct URL. The `DefaultData` is metadata you'd like associated with every event you send to Exceptionless. \n\nWith this configured, you can now call the Exceptionless client from anywhere in your server application without first defining the client. \n\nThis is just one example of one platform Exceptionless supports. But Exceptionless supports a wide range of platforms. For a full list, see the [supported platforms page here](supported-platforms.md).\n\n---\n\n[Next > Logging With Generic Host](logging-with-generic-host.md) {.text-right}\n",
    "basename": "web-server-example",
    "path": "./content/docs/clients/dotnet/guides/web-server-example.md"
  },
  "plugins": {
    "title": "Plugins",
    "order": 8,
    "parent": ".NET",
    "preview": "A plugin is a client-side addin that is run **every time** you …",
    "content": "\nA plugin is a client-side addin that is run **every time** you submit an event.\n\n- [Create a New Plugin](#create-a-new-plugin)\n- [Add System Uptime to Feature Usages](#add-system-uptime-to-feature-usages)\n  - [Output](#output)\n- [Plugin Priority](#plugin-priority)\n- [Adding the Plugin to Your App](#adding-the-plugin-to-your-app)\n- [Removing an Existing Plugin](#removing-an-existing-plugin)\n\n## Create a New Plugin\n\nSpecify a `System.Action<EventPluginContext>` or create a class that derives from [IEventPlugin](https://github.com/exceptionless/Exceptionless.Net/blob/master/src/Exceptionless/Plugins/IEventPlugin.cs) to create a plugin.\n\nEvery plugin is passed an [EventPluginContext](https://github.com/exceptionless/Exceptionless.Net/blob/master/src/Exceptionless/Plugins/EventPluginContext.cs), which contains all the valuable contextual information that your plugin may need via the following properties:\n\n- Client\n- Event\n- ContextData\n- Log\n- Resolver\n\n## Add System Uptime to Feature Usages\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing Exceptionless.Plugins;\nusing Exceptionless.Models;\n\nnamespace Exceptionless.SampleConsole.Plugins {\n    [Priority(100)]\n    public class SystemUptimePlugin : IEventPlugin {\n        public void Run(EventPluginContext context) {\n            // Only update feature usage events.\n            if (context.Event.Type != Event.KnownTypes.FeatureUsage)\n                return;\n\n            // Get the system uptime\n            using (var pc = new PerformanceCounter(\"System\", \"System Up Time\")) {\n                pc.NextValue();\n\n                var uptime = TimeSpan.FromSeconds(pc.NextValue());\n\n                // Store the system uptime as an extended property.\n                context.Event.SetProperty(\"System Uptime\", String.Format(\"{0} Days {1} Hours {2} Minutes {3} Seconds\", uptime.Days, uptime.Hours, uptime.Minutes, uptime.Seconds));\n            }\n        }\n    }\n}\n```\n\n### Output\n\n![Exceptionless Plugin Screenshot](../../../assets/img/news/exceptionless-plugin-system-uptime.png)\n\n## Plugin Priority\n\nThe plugin priority determines the order the plugin runs (lowest to highest, then by order added). All plugins shipped with the client have a starting priority of 10 and increment by multiples of 10. For your addin to run first, give it a priority lower than 10 (e.g., 0-5). To have it run last, give it a priority higher than 100. **If a priority is not specified, it defaults to 0.**\n\n## Adding the Plugin to Your App\n\nStart by calling one of the `Exceptionless.ExceptionlessClient.Default.Configuration.AddPlugin()` overloads. This will typically be the following:\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.AddPlugin<SystemUptimePlugin>();\n```\n\nPassing a `System.Action<EventPluginContext>` to AddPlugin can also be used to add a plugin. _Note we specify a key so we can remove the plugin later. If you won't be removing the plugin, you can omit the first argument._\n\n**AddPlugin is passed three arguments:**\n\n- Unique Plugin Key (to remove later, if applicable)\n- Priority\n- Action (logic)\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.AddPlugin(\"system-uptime\", 100, context => {\n    // Only update feature usage events.\n    if (context.Event.Type != Event.KnownTypes.FeatureUsage)\n        return;\n\n    // Get the system uptime\n    using (var pc = new PerformanceCounter(\"System\", \"System Up Time\")) {\n         pc.NextValue();\n         var uptime = TimeSpan.FromSeconds(pc.NextValue());\n\n         // Store the system uptime as an extended property.\n         context.Event.SetProperty(\"System Uptime\", String.Format(\"{0} Days {1} Hours {2} Minutes {3} Seconds\", uptime.Days, uptime.Hours, uptime.Minutes, uptime.Seconds));\n\n     }\n});\n```\n\n## Removing an Existing Plugin\n\nCall one of the `Exceptionless.ExceptionlessClient.Default.Configuration.RemovePlugin` overloads to remove a plugin.\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.RemovePlugin<SystemUptimePlugin>();\n```\n\nIf it was registered via an action, you have to remove it via the key you added it with.\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.RemovePlugin(\"system-uptime\");\n```\n\n---\n\n[Next > Private Information](private-information.md) {.text-right}",
    "basename": "plugins",
    "path": "./content/docs/clients/dotnet/plugins.md"
  },
  "private-information": {
    "title": "Private Information",
    "order": 9,
    "parent": ".NET",
    "preview": "By default the Exceptionless Client will report all available …",
    "content": "\n\nBy default the Exceptionless Client will report all available metadata which could include potentially private data. There are various ways to limit the scope of data collection. For example, one could use [Data Exclusions](../../security.md) to remove sensitive values but it only applies to specific collection points such as `Cookie Keys`, `Form Data Keys`, `Query String Keys` and `Extra Exception properties`. Additional data may need to be removed like the collection of user names and IP Addresses. Shown below is several examples of how you can configure the client to remove this additional data.\n\nYou have the option of finely tuning what is collected via individual setting options or you can disable the collection of all private data by setting the `IncludePrivateInformation` to `false`.\n\n## Configuration File\n\n```xml\n<exceptionless apiKey=\"YOUR_API_KEY\" includePrivateInformation=\"false\" />\n```\n\n## Code\n\n```csharp\nExceptionlessClient.Default.Configuration.IncludePrivateInformation = false;\n```\n\nIf you wish to have a finer grained approach which allows you to use Data Exclusions while removing specific meta data collection you can do so via code. Please note if the below doesn't meet your needs you can always [write a plugin](../dotnet/plugins.md).\n\n## Configuration\n\n```csharp\n// Include the username if available (E.G., Environment.UserName or IIdentity.Name)\nExceptionlessClient.Default.Configuration.IncludeUserName = false;\n// Include the MachineName in MachineInfo.\nExceptionlessClient.Default.Configuration.IncludeMachineName = false;\n// Include Ip Addresses in MachineInfo and RequestInfo.\nExceptionlessClient.Default.Configuration.IncludeIpAddress = false;\n// Include Cookies, please note that DataExclusions are applied to all Cookie keys when enabled.\nExceptionlessClient.Default.Configuration.IncludeCookies = false;\n// Include Form/POST Data, please note that DataExclusions are only applied to Form data keys when enabled.\nExceptionlessClient.Default.Configuration.IncludePostData = false;\n// Include Query String information, please note that DataExclusions are applied to all Query String keys when enabled.\nExceptionlessClient.Default.Configuration.IncludeQueryString = false;\n```\n\n---\n\n[Next > Troubleshooting](troubleshooting.md) {.text-right}",
    "basename": "private-information",
    "path": "./content/docs/clients/dotnet/private-information.md"
  },
  "sending-events": {
    "title": "Sending Events",
    "order": 4,
    "parent": "JS",
    "preview": "Once configured, Exceptionless automatically sends unhandled …",
    "content": "\nOnce configured, Exceptionless automatically sends unhandled exceptions that happen in your application. To send different event types, as well as customize the data that is sent, continue reading.\n\nYou can send us log messages, feature usages, or other kinds of events easily with our fluent api.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.submitLog('Logging made easy');\n\n// You can also specify the log source and log level.\n// We recommend specifying one of the following log levels: Trace, Debug, Info, Warn, Error\nawait Exceptionless.submitLog('app.logger', 'This is so easy', 'Info');\nawait Exceptionless.createLog('app.logger', 'This is so easy', 'Info').addTags('Exceptionless').submit();\n\n// Submit feature usages\nawait Exceptionless.submitFeatureUsage('MyFeature');\nawait Exceptionless.createFeatureUsage('MyFeature').addTags('Exceptionless').submit();\n\n// Submit a 404\nawait Exceptionless.submitNotFound('/somepage');\nawait Exceptionless.createNotFound('/somepage').addTags('Exceptionless').submit();\n\n// Submit a custom event type\nawait Exceptionless.submitEvent({ message = 'Low Fuel', type = 'racecar', source = 'Fuel System' });\n```\n\n### Manually Sending Errors\n\nIn addition to automatically sending all unhandled exceptions, you may want to manually send exceptions to the service. You can do so by using code like this:\n\n```javascript\nimport { Exceptionless } from \"@exceptionless/browser\";\n\ntry {\n  throw new Error('test');\n} catch (error) {\n  await Exceptionless.submitException(error);\n}\n```\n\n### Sending Additional Information\n\nYou can easily include additional information in your error reports using our fluent [event builder API](https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/packages/core/src/EventBuilder.ts).\n\n```javascript\nimport { Exceptionless } from \"@exceptionless/node\";\n\ntry {\n  throw new Error('Unable to create order from quote.');\n} catch (error) {\n  await Exceptionless.createException(error)\n    // Set the reference id of the event so we can search for it later (reference:id).\n    // This will automatically be populated by default with a unique id;\n    .setReferenceId('random guid')\n    // Add the order object (the ability to exclude specific fields will be coming in a future version).\n    .setProperty(\"Order\", order)\n    // Set the quote number.\n    .setProperty(\"Quote\", 123)\n    // Add an order tag.\n    .addTags(\"Order\")\n    // Mark critical.\n    .markAsCritical()\n    // Set the coordinates of the end user.\n    .setGeo(43.595089, -88.444602)\n    // Set the user id that is in our system and provide a friendly name.\n    .setUserIdentity(user.Id, user.FullName)\n    // Submit the event.\n    .submit();\n}\n```\n\n---\n\n[Next > Troubleshooting](troubleshooting.md) {.text-right}\n",
    "basename": "sending-events",
    "path": "./content/docs/clients/javascript/sending-events.md"
  },
  "settings": {
    "title": "Settings",
    "order": 7,
    "parent": ".NET",
    "preview": "- [About](#about)\n- [Usage Example](#usage-example)\n- [Typed …",
    "content": "\n- [About](#about)\n- [Usage Example](#usage-example)\n- [Typed Helpers](#typed-helpers)\n- [Updating Client Configuration settings](#updating-client-configuration-settings)\n- [Subscribing to Client Configuration Setting changes](#subscribing-to-client-configuration-setting-changes)\n- [Custom Config Settings](#custom-config-settings)\n  - [Configuration file](#configuration-file)\n  - [Attribute](#attribute)\n- [Adding Static Extended Data Values with Every Report](#adding-static-extended-data-values-with-every-report)\n  - [Configuration file](#configuration-file-1)\n  - [Code](#code)\n- [Adding Custom Tags with Every Report](#adding-custom-tags-with-every-report)\n  - [Configuration File](#configuration-file-2)\n  - [Code](#code-1)\n\n## About\n\n[Read about client configuration and view in-depth examples](../../project-settings.md)\n\n## Usage Example\n\nThe below example demonstrates **how we would turn on or off log event submissions at runtime** without redeploying the app or changing server config settings.\n\nFirst, we add a (completely arbitrary for this example) `enableLogSubmission` client configuration value key with value `true` in the Project's Settings in the Exceptionless dashboard.\n\n![Exceptionless Client Configuration Value](../../../assets/img/docs/client-configuration.png)\n\nThen, we register a new client side plugin that runs each time an event is created. If our key (`enableLogSubmission`) is set to false and the event type is set to log, we will discard the event.\n\n```csharp\nExceptionlessClient.Default.Configuration.AddPlugin(\"Conditionally cancel log submission\", 100, context => {\n    var enableLogSubmission = context.Client.Configuration.Settings.GetBoolean(\"enableLogSubmission\", true);\n\n    // only cancel event submission if it’s a log event and enableLogSubmission is false\n    if (context.Event.Type == Event.KnownTypes.Log && !enableLogSubmission) {\n        context.Cancel = true;\n    }\n});\n```\n\n## Typed Helpers\n\nThe `GetBoolean` method checks the `enableLogSubmission` key. This helper method makes it easy to consume saved client configuration values. The first parameter defines the settings key (name). The second parameter is optional and allows you to set a default value if the key doesn’t exist in the settings or was unable to be converted to the proper type (e.g., a boolean).\n\nWe have a few helpers to convert string configuration values to different system types. These methods also contain overloads that allow you to specify default values.\n\n- `GetString`\n- `GetBoolean`\n- `GetInt32`\n- `GetInt64`\n- `GetDouble`\n- `GetDateTime`\n- `GetDateTimeOffset`\n- `GetGuid`\n- `GetStringCollection` (breaks a comma delimited list into an IEnumerable of strings)\n\n## Updating Client Configuration settings\n\n![Exceptionless Client Configuration Settings](../../../assets/img/docs/client-configuration.png)\n\nAll project settings are synced to the client in almost real time. When an event is submitted to Exceptionless we send down a response header with the current configuration version. If a newer version is available we will immediately retrieve and apply the latest configuration.\n\nBy default the client will check after `5 seconds` on client startup (*if no events are submitted on startup*) and then every `2 minutes` after the last event submission for updated configuration settings.\n\n- Checking for updated settings doesn't count towards plan limits.\n- Only the current configuration version is sent when checking for updated settings (no user information will ever be sent).\n- If the settings haven't changed, then no settings will be retrieved.\n\nYou can also **turn off the automatic updating of configuration settings when idle** using the code below.\n\n```csharp\nExceptionlessClient.Default.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.Zero;\n```\n\nYou can also manually update the configuration settings using the code below.\n\n```csharp\nExceptionless.Configuration.SettingsManager.UpdateSettings(ExceptionlessClient.Default.Configuration);\n```\n\n## Subscribing to Client Configuration Setting changes\n\nTo be notified when client configuration settings change, subscribe to them using the below code.\n\n```csharp\nExceptionlessClient.Default.Configuration.Settings.Changed += SettingsOnChanged;\n\nprivate void SettingsOnChanged(object sender, ChangedEventArgs<KeyValuePair<string, string>> args) {\n   Console.WriteLine(\"The key {0} was {1}\", args.Item.Key, args.Action);\n}\n```\n\n## Custom Config Settings\n\nExceptionless allows you to add custom config values to your Exceptionless clients that can be set through the client config section, attributes or remotely on the project settings. These config values can be accessed and used within your app to control things like wether or not to send custom data with your reports. For example, you could have a `IncludeOrderData` flag in your config that you use to control wether or not you add a custom order object to your Exceptionless report data. You can even remotely turn the setting on or off from your project settings. Here is an example of doing that:\n\n### Configuration file\n\n```csharp\n<exceptionless apiKey=\"YOUR_API_KEY\">\n  <settings>\n    <add name=\"IncludeOrderData\" value=\"true\" />\n  </settings>\n</exceptionless>\n```\n\n### Attribute\n\n```csharp\nusing Exceptionless.Configuration;\n[assembly: ExceptionlessSetting(\"IncludeOrderData\", \"true\")]\n```\n\nThen in your app, you can check the setting and determine if you should include the order data or not:\n\n```csharp\nusing Exceptionless;\n\ntry {\n  ...\n} catch (Exception ex) {\n  var report = ex.ToExceptionless();\n  if (ExceptionlessClient.Default.Configuration.Settings[\"IncludeOrderData\"] == \"true\")\n      report.AddObject(order);\n  report.Submit();\n}\n```\n\n## Adding Static Extended Data Values with Every Report\n\nYou can have the Exceptionless client automatically add extended data values to every report that it submits like this:\n\n### Configuration file\n\n```csharp\n<exceptionless apiKey=\"YOUR_API_KEY\">\n    <data>\n      <add name=\"Data1\" value=\"Exceptionless\"/>\n      <add name=\"Data2\" value=\"10\"/>\n      <add name=\"Data3\" value=\"true\"/>\n      <add name=\"Data4\" value=\"{ 'Property1': 'Exceptionless', 'Property2: 10, 'Property3': true }\"/>\n    </data>\n</exceptionless>\n```\n\n### Code\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.DefaultData[\"Data1\"] = \"Exceptionless\";\n```\n\n## Adding Custom Tags with Every Report\n\nYou can have the Exceptionless client automatically add specific tags to every report that it submits like this:\n\n### Configuration File\n\n```csharp\n<exceptionless apiKey=\"YOUR_API_KEY\" tags=\"Tag1,Tag2\" />\n```\n\n### Code\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.DefaultTags.Add(\"Tag1\");\n```\n\n--- \n\n[Next > Plugins](plugins.md) {.text-right}",
    "basename": "settings",
    "path": "./content/docs/clients/dotnet/settings.md"
  },
  "supported-platforms": {
    "title": "Supported Platforms",
    "order": 5,
    "parent": ".NET",
    "preview": "## [Exceptionless](https://www.nuget.org/packages/Exceptionless/)\n …",
    "content": "\n\n## [Exceptionless](https://www.nuget.org/packages/Exceptionless/)\n\nExceptionless client for non-visual (ie. Console and Services) applications. Use this package if you are not using any other platform specific packages.\n\n## [Exceptionless.Mvc](https://www.nuget.org/packages/Exceptionless.Mvc/)\n\nExceptionless client for ASP.NET MVC 3+ applications.\n\n## [Exceptionless.WebApi](https://www.nuget.org/packages/Exceptionless.WebApi/)\n\nExceptionless client for ASP.NET Web API applications.\n\n## [Exceptionless.Web](https://www.nuget.org/packages/Exceptionless.Web/)\n\nExceptionless client for ASP.NET WebForms applications.\n\n## [Exceptionless.AspNetCore](https://www.nuget.org/packages/Exceptionless.AspNetCore/)\n\nExceptionless client for ASP.NET Core applications.\n\n## [Exceptionless.Nancy](https://www.nuget.org/packages/Exceptionless.Nancy/)\n\nExceptionless client for [Nancy](http://nancyfx.org/) applications.\n\n## [Exceptionless.Wpf](https://www.nuget.org/packages/Exceptionless.Wpf/)\n\nExceptionless client for WPF applications.\n\n## [Exceptionless.Windows](https://www.nuget.org/packages/Exceptionless.Windows/)\n\nExceptionless client for Windows Forms applications.\n\n## [Exceptionless.NLog](https://www.nuget.org/packages/Exceptionless.NLog/)\n\nNLog target that sends log entries to Exceptionless.\n\n## [Exceptionless.Log4net](https://www.nuget.org/packages/Exceptionless.Log4net/)\n\nLog4net appender that sends log entries to Exceptionless.\n\n## [Serilog.Sinks.ExceptionLess](https://www.nuget.org/packages/Serilog.Sinks.ExceptionLess/)\n\nSerilog sink that sends log entries to Exceptionless.\n\n--- \n\n[Next > Settings](settings.md) {.text-right}",
    "basename": "supported-platforms",
    "path": "./content/docs/clients/dotnet/supported-platforms.md"
  },
  "troubleshooting": {
    "title": "Troubleshooting",
    "order": 6,
    "parent": "JS",
    "preview": "If your events aren’t being sent to the server there are a few …",
    "content": "\n\nIf your events aren’t being sent to the server there are a few things that you can try to diagnose the issue.\n\n## Update Your Client\n\nPlease make sure that you are using the latest version of the client.\n\n## Ensure the Queue has Time to Process\n\nIf you are using Exceptionless in a scenario where an event is submitted and the process is immediately terminated, then you will need to make sure that the queue is processed before the application ends. Please note that the client will try to do this automatically.\n\nEvents are queued and sent in the background, if the application isn’t running then the events cannot be sent. You can manually force the queue to be processed by calling the following line of code before before the process ends:\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\nawait Exceptionless.processQueue();\n```\n\nThis will cause the event queue to be processed asynchronously and the events to be reported. If this doesn’t solve the issue then please enable client logging and send us the log file. You can also attempt to pass true to `process(true)` to try and process the queue synchronously. _Please note that sending synchronously depends on specific api's that may not be available, so it may not send synchronously._\n\n## Enable Client Logging\n\nThe Exceptionless client can be configured to write diagnostic messages to the console to help diagnose any issues with the client.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.useDebugLogger();\n});\n```\n\n## Check Your API Key\n\nBy design, an invalid API key provided to the Exceptionless client is not going to crash your application. Be sure to check the log outputs as this information will tell you if you have provided an invalid key.\n\n## Debugging Source Code\n\nYou can also debug the Exceptionless source code by using the unmagnified version and set breakpoints in your browsers developer tools.\n\n---\n\n[Next > JavaScript Example](javascript-example.md) {.text-right}\n",
    "basename": "troubleshooting",
    "path": "./content/docs/clients/javascript/troubleshooting.md"
  },
  "upgrading": {
    "title": "Upgrading",
    "order": 11,
    "parent": ".NET",
    "preview": "- [Upgrading from Exceptionless …",
    "content": "\n\n- [Upgrading from Exceptionless 3.x](#upgrading-from-exceptionless-3x)\n- [Upgrading from Exceptionless 2.x](#upgrading-from-exceptionless-2x)\n\n## Upgrading from Exceptionless 3.x\n\n- The `Exceptionless.Portable` package and `Exceptionless.Extras` assembly was merged into the `Exceptionless` package.\n- The `ExceptionlessClient.Default.Register()` method has been removed as the functionality was merged into `ExceptionlessClient.Default.Startup()` method.\n\n## Upgrading from Exceptionless 2.x\n\n- `IEventEnrichment` has been renamed to `IEventPlugin`\n- `IEventPlugin.Enrich(context, event)` signature has been changed to `IEventPlugin.Run(context)`. The event has been moved to the context\n- `client.Configuration.AddEnrichment<IEventEnrichment>();` has been renamed to `client.Configuration.AddPlugin<IEventPlugin>();`\n- `EventPluginContext.Data` property has been renamed to `EventPluginContext.ContextData`\n- `EventSubmittingEventArgs.EnrichmentContextData` property has been renamed to `EventSubmittingEventArgs.PluginContextData`\n\n---  \n\n[Next > JavaScript Client](../javascript/index.md) {.text-right}",
    "basename": "upgrading",
    "path": "./content/docs/clients/dotnet/upgrading.md"
  },
  "client-configuration": {
    "title": "Configuration",
    "order": 1,
    "parent": "JS",
    "preview": "- [Installation](#installation)\n  - [Browser](#browser)\n  - …",
    "content": "\n- [Installation](#installation)\n  - [Browser](#browser)\n  - [Node.js](#nodejs)\n- [Configuration](#configuration)\n  - [Offline Storage](#offline-storage)\n  - [API Key](#api-key)\n  - [Extended Data](#extended-data)\n    - [Default Tags](#default-tags)\n    - [Default Data](#default-data)\n  - [General Data Protection Regulation](#general-data-protection-regulation)\n- [Versioning](#versioning)\n- [Self Hosted Options](#self-hosted-options)\n\n***\n\n## Installation\n\n### Browser\n\n1. Install the package by running `npm install @exceptionless/browser`\n2. Add the Exceptionless client to your app:\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup((c) => {\n  c.apiKey = \"API_KEY_HERE\";\n});\n```\n\n### Node.js\n\n1. Install the package by running `npm install @exceptionless/node`.\n2. Add the Exceptionless client to your app:\n\n```js\nimport { Exceptionless } from \"@exceptionless/node\";\n\nawait Exceptionless.startup(c => {\n  c.apiKey = \"API_KEY_HERE\";\n});\n```\n\n***\n\n## Configuration\n\n_NOTE: The only required setting that you need to configure is the client's `apiKey`._ However, many values may be important for your application. Specifically, you may want to consider persisting events to disk.\n\n### Offline Storage\n\nBy default, Exceptionless keeps events in memory and stores server configuration to local storage if available. This means if the application exits before the event can be sent to the server, the event will not be sent on restart. This can be overcome by persisting events to disk as well.\n\nThis can be done by setting the configuration value like this:\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.usePersistedQueueStorage = true;\n});\n```\n\n### API Key\n\nYou can set the `apiKey` two different ways. The first is by passing it to the\nstartup function. This is the recommended way if you have no other client\nconfiguration settings to configure.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(\"API_KEY_HERE\");\n```\n\nThe second way is to set it on the configuration instance passed to startup.\nThis is the recommended way when configuring multiple settings.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.apiKey: 'API_KEY_HERE',\n  c.serverUrl: 'http://localhost:50000'\n});\n```\n\n**NOTE**: creating new instances is good for sending custom events. **Automatic catching of errors uses default client**. Make sure you setup default client as well if you need automatic catching of unhandled errors.\n\n### Extended Data\n\nYou can include information that is set globally and provided with every event you send. There are two types of data that can be provided this way: Default Tags and Default Data.\n\n#### Default Tags\n\nTo add default tags to every request, you can configure your client like this:\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.defaultTags.push(\"Tag1\", \"Tag2\");\n});\n```\n\n#### Default Data\n\nYou can set up default data to be sent with every request very similarly to how you send default tags. You would do it like this:\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.defaultData[\"data\"] = \"My custom data\";\n});\n```\n\n### General Data Protection Regulation\n\nBy default the Exceptionless Client will report all available metadata which could include potential PII data. There are various ways to limit the scope of PII data collection. For example, one could use [Data Exclusions](/docs/security/#data-exclusions) to remove sensitive values but it only applies to specific collection points such as `Cookie Keys`, `Form Data Keys`, `Query String Keys` and `Extra Exception properties`. Additional data may need to be removed for the GDPR like the collection of user names and IP Addresses. Shown below is several examples of how you can configure the client to remove this additional metadata.\n\nYou have the option of finely tuning what is collected via individual setting options or you can disable the collection of all PII data by setting the `includePrivateInformation` to `false`.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.includePrivateInformation = false;\n});\n```\n\nIf you wish to have a finer grained approach which allows you to use Data Exclusions while removing specific meta data collection you can do so via code. Please note if the below doesn't meet your needs you can always write a plugin.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  // Include the username if available.\n  c.includeUserName = false;\n  // Include the MachineName in MachineInfo.\n  c.includeMachineName = false;\n  // Include Ip Addresses in MachineInfo and RequestInfo.\n  c.includeIpAddress = false;\n  // Include Cookies, please note that DataExclusions are applied to all Cookie keys when enabled.\n  c.includeCookies = false;\n  // Include Form/POST Data, please note that DataExclusions are only applied to Form data keys when enabled.\n  c.includePostData = false;\n  // Include Query String information, please note that DataExclusions are applied to all Query String keys when enabled.\n  c.includeQueryString = false;\n});\n```\n\n## Versioning\n\nBy specifying an application version you can [enable additional functionality](../../versioning.md). It's a good practice to specify an application version if possible using the code below.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.version = \"1.2.3\";\n});\n```\n\n## Self Hosted Options\n\nThe Exceptionless client can also be configured to send data to your [self hosted instance](../../self-hosting/index.md). This is configured by setting the `serverUrl` setting to point to your Exceptionless instance.\n\n```js\nimport { Exceptionless } from \"@exceptionless/browser\";\n\nawait Exceptionless.startup(c => {\n  c.apiKey: 'API_KEY_HERE',\n  c.serverUrl: 'http://localhost:50000'\n});\n```\n\n***\n\n[Next > Client Configuration Values](client-configuration-values.md) {.text-right}\n",
    "basename": "client-configuration",
    "path": "./content/docs/clients/javascript/client-configuration.md"
  },
  "express-example": {
    "title": "Express Example",
    "preview": "Add Exceptionless to your Express.js project and start collecting …",
    "content": "\nAdd Exceptionless to your Express.js project and start collecting unhandled errors and 404s quickly.\n\nTo start, just add the following middleware to the bottom of your middleware definitions.\n\n```js\nimport { Exceptionless } from \"@exceptionless/node\";\n\n// This middleware processes any unhandled errors that may occur in your middleware.\napp.use(async (err, req, res, next) => {\n  if (res.headersSent) {\n    return next(err)\n  }\n\n  await Exceptionless.createUnhandledException(err, \"express\")\n    .addRequestInfo(req)\n    .submit();\n\n  res.status(500).send(\"Something broke!\");\n});\n\n// This middleware processes 404’s.\napp.use(async (req, res) => {\n  await Exceptionless.createNotFound(req.originalUrl).addRequestInfo(req).submit();\n  res.status(404).send(\"Sorry cant find that!\");\n});\n```\n\n## Sample Express.js App\n\nWe have built a quick [Express.js sample app](https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example/express/app.js) you can play around with.\n\n**Run the sample app by following the steps below:**\n\n1. Install [Node.js](https://nodejs.org/)\n2. [Clone or download our repository from GitHub](https://github.com/exceptionless/Exceptionless.JavaScript).\n3. Run `npm install`. This steps is required because we reference the exceptionless package from the root dist folder.\n4. Navigate to the `example\\express` folder via the command line (e.g., cd example\\express)\n5. Open app.js in your favorite text editor and set the [`apiKey`](https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example/express/app.js#L7). You may need to remove the `serverUrl` setting if you are not self hosting.\n6. Run node app.js.\n7. Navigate to <http://localhost:3000> in your browser to view the express app.\n8. To create an error, navigate to <http://localhost:3000/boom>\n\n### Troubleshooting\n\nWe recommend enabling debug logging by calling `Exceptionless.config.useDebugLogger();`. This will output messages to the console regarding what the client is doing. Please contact us by creating an issue on GitHub if you need assistance or have any feedback for the project.\n\n---\n\n[Next > Angular Example](react-example.md) {.text-right}\n",
    "basename": "express-example",
    "path": "./content/docs/clients/javascript/express-example.md"
  },
  "angular": {
    "title": "Angular",
    "order": 3,
    "parent": "JS Guides",
    "preview": "Exceptionless can be configured in just about any JavaScript …",
    "content": "\n\nExceptionless can be configured in just about any JavaScript environment, but this section is dedicated to set up and use within the Angular framework. \n\n### Install \n\nTo install exceptionless, you can use npm or yarn: \n\nnpm - `npm install exceptionless`\n\nyarn - `yarn add exceptionless`\n\n### Initializing the Client \n\nWith Exceptionless, you can initialize a default client which provides a singleton instance, or you can initialize a custom client. We'll go over the way to initialize each.\n\n**Default Client**  \n```javascript\nimport { ExceptionlessClient } from 'exceptionless';\nconst client = ExceptionlessClient.default;\nclient.config.apiKey = 'YOUR API KEY';\n``` \n\nWith that set up, you can use the Exceptionless default client anywhere in your app in a number of ways. You can [use hooks](../../../../news/2021/2021-01-19-how-to-use-react-hooks-to-monitor-events-in-your-app.md), you can use [Redux](https://redux.js.org/), you can pass Exceptionless down through a higher-order component. \n\n**Custom Client** \n\nThere are a variety of reasons you might want to instantiate a custom Exceptionless client. The custom client, for one, gives you more configuration options. Let's take a look at how to set it up. \n\n```javascript\nimport { ExceptionlessClient } from 'exceptionless';\nconst config = {\n  apiKey: \"YOUR API KEY\", \n  serverUrl: \"YOUR SELF HOSTED URL\",\n  ...\n};\nconst client = new ExceptionlessClient(config);\n```\n\nYou can see an additional parameter passed into the configuration object as an example. To see all the available options, take a look at our [configuration values here](../client-configuration-values.md).\n\nJust like with the default client, you can now pass this custom client throughout your app. If needed, you can also instantiate a new custom client anywhere in your application. \n\n### Using Exceptionless in an Angular Component \n\nTo make use of Exceptionless within a component, you'll import the package like described above. Your set up will vary depending on your needs, but this is a quick example of using Exceptionless within the `app` component of a default Angular project. \n\n```js\nimport { Component } from '@angular/core';\nimport { ExceptionlessClient } from 'exceptionless';\nconst defaultClient = ExceptionlessClient.default;\ndefaultClient.config.apiKey = \"YOUR API KEY\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'my-app';\n  public handleClick(event) {\n    try {\n      throw new Error(\"Whoops!\");\n    } catch (error) {\n      defaultClient.submitException(error);\n    }\n  }\n}\n```\n\nIn the `app` component's html, clicking a button that calls `handleClick` will immediately throw an error and report it to Exceptionless. \n\n---  \n\n[Next > Express](express.md) {.text-right}",
    "basename": "angular",
    "path": "./content/docs/clients/javascript/guides/angular.md"
  },
  "express": {
    "title": "Express",
    "order": 4,
    "parent": "JS Guides",
    "preview": "Perhaps the most popular NodeJS server-side framework, Express is …",
    "content": "\n\nPerhaps the most popular NodeJS server-side framework, Express is used in thousands of projects. Exceptionless provides dedicated NodeJS support, and configuring your Exceptionless client in Express is easy. \n\n### Install \n\nTo install exceptionless, you can use npm or yarn: \n\nnpm - `npm install exceptionless`\n\nyarn - `yarn add exceptionless`\n\n### Initializing the Client \n\nWith Exceptionless, you can initialize a default client which provides a singleton instance, or you can initialize a custom client. We'll go over the way to initialize each. \n\n**Default Client**  \n```javascript\nconst { ExceptionlessClient } = require('exceptionless/dist/exceptionless');\nconst client = ExceptionlessClient.default;\nclient.config.apiKey = 'YOUR API KEY';\n``` \n\nWith that set up, you can use the Exceptionless default client anywhere in your app in a number of ways. You can [use hooks](../../../../news/2021/2021-01-19-how-to-use-react-hooks-to-monitor-events-in-your-app.md), you can use [Redux](https://redux.js.org/), you can pass Exceptionless down through a higher-order component. \n\n**Custom Client** \n\nThere are a variety of reasons you might want to instantiate a custom Exceptionless client. The custom client, for one, gives you more configuration options. Let's take a look at how to set it up. \n\n```javascript\nconst { ExceptionlessClient } = require('exceptionless/dist/exceptionless');\nconst config = {\n  apiKey: \"YOUR API KEY\", \n  serverUrl: \"YOUR SELF HOSTED URL\",\n  ...\n};\nconst client = new ExceptionlessClient(config);\n```\n\n### Simple Example\n\nIn this example, we're just making use of the Exceptionless client in a file that handles one of our API routes. \n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\nconst { isAuthenticated } = require(\"./middleware\");\nconst { ExceptionlessClient } = require(\"exceptionless/dist/exceptionless.node\");\nconst config = {\n  apiKey: \"YOUR API KEY\", \n  serverUrl: \"YOUR SELF HOSTED URL\", // Optional, leave blank if using hosted Exceptionless\n  ...\n};\nconst client = new ExceptionlessClient(config);\n\nrouter.get(\"/:userId\", isAuthenticated(client), async (req, res) => {\n    try {\n        const user = await fetchUserById(req.params.userId);        \n        return res.status(200).json(user);\n    } catch (error) { \n        client.createException(error).submit();   \n        return res.status(500).send(error);\n    }\n});\n\nmodule.exports = router;\n```\n\nYou'll notice, we have an `isAuthenticated` middleware function that we are passing our client into. This is just one way to give middleware access to the Exceptionless client. In the next example, you'll see a global way of doing all of this. \n\nIn the route itself, we have a try/catch and we use our client to submit an exception if an error is triggered. \n\n### Global Example  \n\nIn the entry file for your Express app, which is normally `server.js` or `app.js`, we can declare our Exceptionless client the same way as above. Then, we can make use of the built-in Express \n\n```js\nconst express = require(\"express\");\nconst PORT = 5000;\nconst { ExceptionlessClient } = require(\"exceptionless/dist/exceptionless.node\");\nconst config = {\n  apiKey: \"YOUR API KEY\"\n};\nconst client = new ExceptionlessClient(config);\n\nconst app = express();\n\napp.get(\"/\", (req, res, next) => {\n  res.status(200).send(missingVariable);\n});\n\napp.use((error, req, res, next) => {\n  client.createException(error).submit();\n  return res.status(500).json({ error: error.toString() });\n});\n\napp.listen(PORT, async () => {       \n  console.log(`App listening on port ${PORT}`);\n});\n```\n\nIn this example, it's important that your `app.use` handler for errors comes after your routes. This makes it so that uncaught errors will automatically be sent to Exceptionless and an error response will be sent back to the user. ",
    "basename": "express",
    "path": "./content/docs/clients/javascript/guides/express.md"
  },
  "more-guides": {
    "title": "More Guides",
    "order": 5,
    "parent": "JS Guides",
    "preview": "In addition to the quick start guides we've provided here, there are …",
    "content": "\n\nIn addition to the quick start guides we've provided here, there are full app examples located in our Github repository. Take a look and feel free to let us know if you'd like to see other tutorials and guides included. \n\n[JavaScript Example Repository](https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example)\n\n[Next > Sending Events](../sending-events.md) {.text-right}",
    "basename": "more-guides",
    "path": "./content/docs/clients/javascript/guides/more-guides.md"
  },
  "react": {
    "title": "React",
    "order": 1,
    "parent": "JS Guides",
    "preview": "Exceptionless can be configured in just about any JavaScript …",
    "content": "\n\nExceptionless can be configured in just about any JavaScript environment, but this section is dedicated to set up and use within the React framework. \n\n### Install \n\nTo install exceptionless, you can use npm or yarn: \n\nnpm - `npm install exceptionless`\n\nyarn - `yarn add exceptionless`\n\n### Initializing the Client \n\nWith Exceptionless, you can initialize a default client which provides a singleton instance, or you can initialize a custom client. We'll go over the way to initialize each. \n\n**Default Client**  \n```javascript\nimport { ExceptionlessClient } from 'exceptionless/dist/exceptionless';\nconst client = ExceptionlessClient.default;\nclient.config.apiKey = 'YOUR API KEY';\n``` \n\nWith that set up, you can use the Exceptionless default client anywhere in your app in a number of ways. You can [use hooks](../../../../news/2021/2021-01-19-how-to-use-react-hooks-to-monitor-events-in-your-app.md), you can use [Redux](https://redux.js.org/), you can pass Exceptionless down through a higher-order component. \n\n**Custom Client** \n\nThere are a variety of reasons you might want to instantiate a custom Exceptionless client. The custom client, for one, gives you more configuration options. Let's take a look at how to set it up. \n\n```javascript\nimport { ExceptionlessClient } from 'exceptionless/dist/exceptionless';\nconst config = {\n  apiKey: \"YOUR API KEY\", \n  serverUrl: \"YOUR SELF HOSTED URL\",\n  ...\n};\nconst client = new ExceptionlessClient(config);\n```\n\nYou can see an additional parameter passed into the configuration object as an example. To see all the available options, take a look at our [configuration values here](../client-configuration-values.md).\n\nJust like with the default client, you can now pass this custom client throughout your app. If needed, you can also instantiate a new custom client anywhere in your application. \n\n### Creating an Exceptionless Provider  \n\nExceptionless doesn't have a React Provider element out of the box, but setting one up is relatively easy. This is a simple example of how to do so. \n\nFirst, create a `context.js` file like this: \n\n```javascript\nimport React, { createContext, useReducer } from 'react';\n\nexport default (reducer, actions, initialState) => {\n  const Context = createContext();\n\n  const Provider = (props) => {\n    const { children } = props;\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const boundActions = {};\n    \n    for(let key in actions) {\n      boundActions[key] = actions[key](dispatch);\n    }\n\n    const valueProps = {\n      state, \n      ...boundActions\n    }\n    return <Context.Provider value={valueProps}>{children}</Context.Provider>;\n  }\n\n  return { Context, Provider };\n}\n```\n\nThis is just setting up a Provider element that we can wrap around any other components in the application. \n\nNext, create a `store.js` file like this: \n\n```javascript\nimport context from './context';\nimport { ExceptionlessClient } from 'exceptionless/dist/exceptionless';\nconst defaultClient = ExceptionlessClient.default;\ndefaultClient.config.apiKey = 'YOUR API KEY';\n\nconst initialState = {\n  client: defaultClient\n}\n\nexport const reducer = (state, action) => {\n  switch(action.type) {\n    default: \n      return {\n        ...state\n      }\n  }\n}\n\nexport const { Context, Provider } = context(\n  reducer,\n  initialState\n);\n```\n\nThis is a very simplified reducer/store example. Normally, you would have action creators and payloads that update state. Since we're only covering the Exceptionless client in here, there is no need for state updates. \n\nWhat this does for us though is creates an extendible Provider component that can wrap other components in the app. To use it, you may want to simply wrap the `App.js` component in your application like so: \n\n```javascript\nimport { useContext } from 'react';\nimport { Provider, Context } from \"./store\";\n\nconst App = () => {\n  const { state } = useContext(Context);\n  const { client } = state;\n  return (\n    <Provider>\n      <>\n      Your App.js code or components\n      </>\n    </Provider>\n  )\n} \n\nexport default App;\n```\n\nNow in any components you ultimately write that are nested within your App.js file, you will have access to the Exceptionless client and can manage errors and events. \n\n---  \n\n[Next > Vue](vue.md) {.text-right}",
    "basename": "react",
    "path": "./content/docs/clients/javascript/guides/react.md"
  },
  "vue": {
    "title": "Vue",
    "order": 2,
    "parent": "JS Guides",
    "preview": "Vue is one of the more popular JavaScript frameworks out there, and …",
    "content": "\n\nVue is one of the more popular JavaScript frameworks out there, and Exceptionless has your back if you're working with it. Getting started is simple. \n\n### Install \n\nTo install exceptionless, you can use npm or yarn: \n\nnpm - `npm install exceptionless`\n\nyarn - `yarn add exceptionless`\n\n### Initializing the Client \n\nWith Exceptionless, you can initialize a default client which provides a singleton instance, or you can initialize a custom client. We'll go over the way to initialize each. \n\n**Default Client**  \n```javascript\nimport { ExceptionlessClient } from 'exceptionless/dist/exceptionless';\nconst client = ExceptionlessClient.default;\nclient.config.apiKey = 'YOUR API KEY';\n``` \n\nWith that set up, you can use the Exceptionless default client anywhere in your app in a number of ways. You can pull it into a template file or you can create global state store to pass the client around the app.\n\n**Custom Client** \n\nThere are a variety of reasons you might want to instantiate a custom Exceptionless client. The custom client, for one, gives you more configuration options. Let's take a look at how to set it up. \n\n```javascript\nimport { ExceptionlessClient } from 'exceptionless/dist/exceptionless';\nconst config = {\n  apiKey: \"YOUR API KEY\", \n  serverUrl: \"YOUR SELF HOSTED URL\",\n  ...\n};\nconst client = new ExceptionlessClient(config);\n```\n\nYou can see an additional parameter passed into the configuration object as an example. To see all the available options, take a look at our [configuration values here](../client-configuration-values.md).\n\nJust like with the default client, you can now pass this custom client throughout your app. If needed, you can also instantiate a new custom client anywhere in your application. \n\n## Using Exceptionless Through Global State \n\nIf you'd like to pass the Exceptionless client around your app using global state, there are a few methods you can implement. This example is a simple example of creating a global state store that can be accessed anywhere. \n\nStart by creating a `store.js` file that looks like this: \n\n```javascript\nimport { reactive, toRefs } from \"vue\";\nimport { ExceptionlessClient } from \"exceptionless/dist/exceptionless\";\nconst defaultClient = ExceptionlessClient.default;\ndefaultClient.config.apiKey = \"YOUR API KEY\";\n\nconst state = reactive({\n    client: defaultClient\n});\n\nexport default function useMonitoring() {\n    return {\n        ...toRefs(state),\n    }\n}\n```\n\nAgain, this is a very simple example that literally uses global state just for the Exceptionless client. You'd likely use it for more than that. \n\nNow, to make use of our global state, just import it anywhere in your app like you would call your `useMonitoring` method to get access to your state variables, and in this case get access to Exceptionless. \n\nSince our example is making use of the default client, you could also simply import the Exceptionless default client into any script tag you have in your components like this: \n\n```js\nimport { ExceptionlessClient } from \"exceptionless/dist/exceptionless\";\nconst defaultClient = ExceptionlessClient.default;\ndefaultClient.config.apiKey = \"YOUR API KEY\";\n```\n\n---  \n\n[Next > Angular](angular.md) {.text-right}\n\n\n\n",
    "basename": "vue",
    "path": "./content/docs/clients/javascript/guides/vue.md"
  },
  "javascript-example": {
    "title": "JavaScript Example",
    "preview": "We have put together an example for a few JavaScript-based …",
    "content": "\nWe have put together an example for a few JavaScript-based frameworks and the browser to help you get started. You can find those [here in the GitHub Repo](https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example). You can clone the repository and run the code as is or you can use the repository example as a starting point.\n\nFor framework specific details, continue on to the next page or select a specific framework on the left. \n---\n\n[Next > React Example](react-example.md) {.text-right}",
    "basename": "javascript-example",
    "path": "./content/docs/clients/javascript/javascript-example.md"
  },
  "node-example": {
    "title": "Node.js Example",
    "preview": "When working with Node.js in a non-server environment means you have …",
    "content": "\nWhen working with Node.js in a non-server environment means you have to think about queue processing a little more than in any other environment. If your Node.js app crashes or exits before the Exceptionless event queue can be cleared, you'll miss events. So, here is a simple guide to ensure you capture all events. \n\n```js\nimport { Exceptionless } from \"@exceptionless/node\";\n\n(async () => {\n  try {\n    await Exceptionless.startup((c) => {\n      c.apiKey = \"YOUR API KEY\";\n      c.defaultTags.push(\"Example\", \"Node\");\n    });\n    throw new Error(\"Whoops, I did it again.\")\n  } catch(e) {\n    await Exceptionless.submitException(e);\n  }\n})();\n```\n\nExceptionless has some powerful tools to help catch unhandled errors, but with a non-server app, and specifically with an app where an unhandled error can cause the entire process to end, you need to try to handle everything. That is why in the above example, the startup function is wrapped in a try/catch. \n\nIf you do want your app to exit immediately after an error, you can send the error as seen above, and then add the following before you exit: `await Exceptionless.processQueue()`\n---\n\n[Next > Express Example](express-example.md) {.text-right }\n",
    "basename": "node-example",
    "path": "./content/docs/clients/javascript/node-example.md"
  },
  "react-example": {
    "title": "React Example",
    "preview": "The React Client from Exceptionless includes all of the …",
    "content": "\nThe React Client from Exceptionless includes all of the functionality from the brwoser client, but with some extra React-specific helpers. \n\nThe one thing you'll specifically notice in the React client is the addition of an `ExceptionlessErrorBoundary` class component. This is a wrapper component that can be used to ensure all errors in the presentational layer of your app are reported. \n\nIt works exactly as Error Boundaries in React work, but it's pre-wired to report to Exceptionless. Here's a very simple example: \n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  Exceptionless, \n  ExceptionlessErrorBoundary\n} from \"@exceptionless/react\";\nimport ErrorBoundary from './ErrorBoundary';\n\nconst startExceptionless = async () => {\n  await Exceptionless.startup((c) => {\n    c.apiKey = \"YOUR API KEY\";\n    c.useDebugLogger();\n\n    c.defaultTags.push(\"Example\", \"React\");\n  });\n};\n\nstartExceptionless();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <ExceptionlessErrorBoundary>\n        <App />\n      </ExceptionlessErrorBoundary>\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n```\n\nAs you can see, we wrap the root `App` component first in the `ExceptionlessErrorBoundary` and then if you want to present your own fallback UI, you can create a custom `ErrorBoundary` component that will make sure that UI is served. \n\nWe have a detailed [blog post about this here](https://exceptionless.com/news/2021/2021-08-16-how-to-use-error-boundaries-in-react/). \n\n[The full example / sample can be found here](https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example/react).\n\n---\n\n[Next > Node.js Example](node-example.md) {.text-right }\n",
    "basename": "react-example",
    "path": "./content/docs/clients/javascript/react-example.md"
  },
  "vue-example": {
    "title": "Vue Example",
    "preview": "[Example / Sample can be found …",
    "content": "\n[Example / Sample can be found here](https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example/vue).\n\n---\n\n[Next > Self-Hosting](../../self-hosting/index.md) {.text-right}\n",
    "basename": "vue-example",
    "path": "./content/docs/clients/javascript/vue-example.md"
  },
  "comparison": {
    "title": "Comparison",
    "order": 16,
    "preview": "| Feature                        | Exceptionless | Application …",
    "content": "\n| Feature                        | Exceptionless | Application Insights | Elmah | Raygun |\n| :----------------------------- | :-----------: | :------------------: | :---: | :----: |\n| Open Source                    | X             |                      | X     |\n| Free Self Hosting              | X             |                      | X     |\n| Detailed error reports         | X             | X                    |       | X      |\n| Email Notifications            | X             | X                    | X     | X      |\n| Export Events                  |               | X                    | X     |\n| Filtering                      | X             | X                    |       | X      |\n| Send Custom Data [^1]          | X             |                      |       | X      |\n| Real-time Client Configuration | X             |                      |       |\n| Real-time Dashboards           | X             |                      |       |\n| Complete Rest API              | X             |                      |       |\n| Search                         | X             | X                    |       | X      |\n| Search Custom Fields           | X             |                      |       |\n| Intelligent Stacking           | X             | X                    |       | X      |\n| Custom Stacking                | X             |                      |       | X      |\n| Mark Fixed                     | X             |                      |       | X      |\n| Mark Hidden                    | X             |                      |       | X      |\n| Comment on Events              |               |                      |       | X      |\n| Support Multiple Platforms     | X             | X                    |       | X      |\n| User Sessions [^2]             | X             |                      |       | X      |\n| User % [^3]                    | X             |                      |       | ?      |\n| Broken Links                   | X             | X                    | X     | X      |\n| Releases                       |               |                      |       | X      |\n| Feature Usages                 | X             |                      |       |\n| Log Messages                   | X             |                      |       |\n| Custom Event Types             | X             | X                    |       |\n| Webhooks                       | X             | X                    |       | X      |\n\n- **X** = has feature, **empty box** does not have feature, **?** = unknown\n\n[^1]: Send custom data on any event and promote it to a first class tab.\n[^2]: Automatically tracks users sessions. Please note that this is a paid add on for Raygun Pulse (**$149/mo**).\n[^3]: Ability to see how many users are affected by an error or are using a specific feature.\n\n---\n\n[Next > Security](security.md) {.text-right}",
    "basename": "comparison",
    "path": "./content/docs/comparison.md"
  },
  "deduplication": {
    "title": "Event De-Duplication",
    "order": 13,
    "preview": "Have you ever run into an error where the event that triggers the …",
    "content": "\n\nHave you ever run into an error where the event that triggers the error happens rapidly in a short amount of time? Infinite loops combined with errors? Ugh. If that happens, we don't think you should have to worry about your event quotas and plan limits. \n\nThat's why we built automatic de-duplication. \n\nIf we get two events that are exactly the same within a minute, we send the first, cancel the second and hold onto it for 60 seconds. If that same exact event comes in again, we cancel it and increment the count on the one we were holding. Once 60 seconds is released we submit that event and now you get a sampling of events during that period with the exact account that occurred. We only do this if the event is an exactly the same minus date occurred.\n\n---\n\n[Next > Integrations](integrations.md) {.text-right}",
    "basename": "deduplication",
    "path": "./content/docs/deduplication.md"
  },
  "demo-formatting": {
    "title": "Markdown Formatting Demo",
    "eleventyExcludeFromCollections": true,
    "preview": "Shows all the different markdown formatting options available for …",
    "content": "\nShows all the different markdown formatting options available for writing docs and blog posts\n\nGeneral markdown-it formatting: <https://markdown-it.github.io/>\n\n- [Footnote](#footnote)\n- [Anchor Links](#anchor-links)\n- [Attrs {.text-center}](#attrs-text-center)\n- [Bracketed Spans](#bracketed-spans)\n- [Alerts](#alerts)\n- [Abbreviations](#abbreviations)\n- [Tables](#tables)\n\n## Footnote\n\n<https://github.com/markdown-it/markdown-it-footnote>\n\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n## Anchor Links\n\n<https://github.com/valeriangalliat/markdown-it-anchor>\n\n[Link to footnote section](#footnote)\n\n## Attrs {.text-center}\n\n<https://github.com/arve0/markdown-it-attrs>\n\nparagraph {.text-center}\n\n## Bracketed Spans\n\n<https://github.com/mb21/markdown-it-bracketed-spans>\n\nparagraph with [a warning span]{.text-warning}\n\n## Alerts\n\n<https://github.com/nunof07/markdown-it-alerts>\n\n::: danger\nDanger danger danger! [Link](#).\n:::\n\n::: info\nInformation information information! [Link](#).\n:::\n\n::: success\nSuccess success success! [Link](#).\n:::\n\n## Abbreviations\n\n<https://github.com/markdown-it/markdown-it-abbr>\n\n*[HTML]: Hyper Text Markup Language\n*[W3C]:  World Wide Web Consortium\nThe HTML specification\nis maintained by the W3C.\n\n## Tables\n\n| Feature                        | Exceptionless | Application Insights | Elmah | Raygun |\n| :----------------------------- | :-----------: | :------------------: | :---: | :----: |\n| Open Source                    | X             |                      | X     |\n| Free Self Hosting              | X             |                      | X     |\n| Detailed error reports         | X             | X                    |       | X      |\n",
    "basename": "demo-formatting",
    "path": "./content/docs/demo-formatting.md"
  },
  "FAQ": {
    "title": "FAQ",
    "order": 15,
    "preview": "- [Will Exceptionless slow my application …",
    "content": "\n- [Will Exceptionless slow my application down?](#will-exceptionless-slow-my-application-down)\n- [Why is my organization throttled?](#why-is-my-organization-throttled)\n- [What happens if the organization plan limit is reached?](#what-happens-if-the-organization-plan-limit-is-reached)\n- [What will happen if my application throws a bunch of exceptions in a very short amount of time?](#what-will-happen-if-my-application-throws-a-bunch-of-exceptions-in-a-very-short-amount-of-time)\n- [Can I reset my event data?](#can-i-reset-my-event-data)\n- [What happens if my internet connection goes down?](#what-happens-if-my-internet-connection-goes-down)\n- [How can I disable event reporting during testing?](#how-can-i-disable-event-reporting-during-testing)\n- [Is there a minimum version of .NET you need to be targeting to use the Exceptionless client.](#is-there-a-minimum-version-of-net-you-need-to-be-targeting-to-use-the-exceptionless-client)\n- [Can I use Exceptionless under medium trust?](#can-i-use-exceptionless-under-medium-trust)\n\n***\n\n## Will Exceptionless slow my application down?\n\nExceptionless queues all events submissions to an in memory queue and then processes them in a background thread. We do everything we can to make sure that we do not slow your app down or crash your app.\n\n***\n\n## Why is my organization throttled?\n\nEvery plan has both a monthly limit as well as an hourly limit. The hourly limit resets every hour and is [calculated](https://github.com/exceptionless/Exceptionless/blob/master/src/Exceptionless.Core/Extensions/OrganizationExtensions.cs#L51-L65) based on the remaining event limit divided by the number of hours left in the month times 10. We do this to prevent your event limit from being reached in seconds or minutes, thus giving you a greater sample size. _The limit can be increased at any time by upgrading the plan which boosts the monthly limit as well as hourly limit._\n\n***\n\n## What happens if the organization plan limit is reached?\n\nWhen the organization is throttled (hourly limit) or the plan limit (monthly limit) is reached, the clients will automatically discard any submitted events for a short period of time (usually five minutes) and resume automatically. Your app will continue to work as expected this entire time. _The limit can be increased at any time by upgrading the plan which boosts the monthly limit as well as hourly limit._\n\n***\n\n## What will happen if my application throws a bunch of exceptions in a very short amount of time?\n\nExceptionless will intelligently try to ensure that the right amount of data is sent in. First, the client will intelligently ensure that the same event occurrence isn’t submitted repeatedly. Lets assume you have ten of the exact events submitted over a period of a minute. The first one comes through as expected, the next 9 events will be rolled up into a single event with a counter and last occurred date and submitted at the end of the 60 seconds. This allows us to show you a total of how many times the event occurred. Finally, in some cases the server logic will step in to remove error occurrences that it feels are spam. For example: Your site might be scanned by a bot and throw a bunch of unique 404 errors. Our system will see all of these within a small window of time submitted by a specific IP address. Once it hits a configurable threshold of error occurrences within a specific amount of time, these error occurrences will be removed from the system.\n\n***\n\n## Can I reset my event data?\n\nYou can reset your event data at the project level by going into the manage project page and clicking the Reset Project Data button. You can also delete all event data for a specific stack by going to the stack page, clicking the Options button and clicking Delete. _Please note that this will not reset any plan limits._\n\n***\n\n## What happens if my internet connection goes down?\n\nIf persistent storage is configured, the Exceptionless client will queue all events submissions to disk and will retry them later.\n\n***\n\n## How can I disable event reporting during testing?\n\nSet the enabled attribute to false in the exceptionless config section.\n\n***\n\n## Is there a minimum version of .NET you need to be targeting to use the Exceptionless client.\n\nYes, your application needs to be targeting .NET 4.5 or newer.\n\n***\n\n## Can I use Exceptionless under medium trust?\n\nYes, you will need to set the requirePermission attribute to false in the exceptionless config section. This attribute allows the exceptionless client to read the exceptionless config settings. When you are running in medium trust, unhandled exceptions will not be caught. This means that you must submit exceptions to Exceptionless manually.\n\n---\n\n[Next > Comparison](comparison.md) {.text-right}",
    "basename": "FAQ",
    "path": "./content/docs/FAQ.md"
  },
  "filtering-and-searching": {
    "title": "Filtering & Searching",
    "order": 4,
    "preview": "- [Filter by Organization & …",
    "content": "\n- [Filter by Organization & Project](#filter-by-organization--project)\n- [Filter by Time Frame](#filter-by-time-frame)\n- [Filter / Search by Specific Criteria](#filter--search-by-specific-criteria)\n- [Searchable Fields & Requirements](#searchable-fields--requirements)\n- [Multiple Queries](#multiple-queries)\n- [Wild Cards](#wild-cards)\n- [Exclusions](#exclusions)\n- [Set and Unset Fields](#set-and-unset-fields)\n- [Ranges](#ranges)\n- [Custom Extended Data](#custom-extended-data)\n- [Demo Video](#demo-video)\n\n## Filter by Organization & Project\n\nThe dashboard loads up with all projects selected by default.\n\nClick on the “All Projects” drop down in the top left of the dashboard and select your organization or project to filter the data to your liking.\n\n![Exceptionless Filter Project Organization](img/filter-by-project-organization.png)\n\n## Filter by Time Frame\n\nClick on the calendar icon in the header to select from multiple preset time frame filters, or click \"Custom\" and select your own.\n\n![Exceptionless Filter Time Frame](img/filter-by-timeframe.png)\n\n## Filter / Search by Specific Criteria\n\nClick the magnifying glass to search by specific criteria.\n\nYou can filter by tag, ID, organization, project, stack, type, value, IP, architecture, user, and much more.\n\nSome searches, such as ID, require a prefix (“id:”) on the search, but others, such as error.message, can be entered as strings (“A NullReferenceException occurred”).\n\nView a complete list of searchable terms, examples, and FAQs below.\n\n![Exceptionless Filter Search Criteria Field](img/filter-by-search-filter-criteria.png)\n\n## Searchable Fields & Requirements\n\n| TERM               | EXAMPLE                                                                                                              | FIELD REQUIRED? (field:term) | DESCRIPTION                                   |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------- | ---------------------------- | --------------------------------------------- |\n| `*`                | `*`                                                                                                                  | false                        | Shows all events (including hidden and fixed) |\n| id                 | `id:54d8315ce6bb2d0500bcc7b4`                                                                                        | true                         | Documents id                                  |\n| organization       | `organization:54d8315ce6bb2d0500bcc7b4`                                                                              | true                         | Organization id                               |\n| project            | `project:54d8315ce6bb2d0500bcc7b4`                                                                                   | true                         | Project id                                    |\n| stack              | `stack:54d8315ce6bb2d0500bcc7b4`                                                                                     | true                         | Stack id                                      |\n| reference          | `reference:12345678`                                                                                                 | true                         | Reference id                                  |\n| session            | `session:12345678`                                                                                                   | true                         | Session id                                    |\n| type               | `type:error`                                                                                                         | true                         | Event type                                    |\n| source             | `source:\"my log source\"` or `\"my log source\"`                                                                        | false                        | Event source                                  |\n| level              | `level:Error`                                                                                                        | true                         | Log level                                     |\n| date               | `date:\"2020-10-16T12:00:00.000\"`                                                                                     | true                         | Occurrence date                               |\n| first              | `first:true`                                                                                                         | true                         | True if first occurrence of event             |\n| message            | `message:\"My error message\"` or `\"My error message\"`                                                                 | false                        | Event message                                 |\n| tag                | `tag:\"Blake Niemyjski\"` or `tag:Blake` or `blake`                                                                    | false                        | Tags                                          |\n| value              | `value:1`                                                                                                            | true                         | Value of event (used in charts)               |\n| status             | `status:open` or `status:discarded` or `status:fixed` or `status:regressed` or `status:snoozed` or `status:ignored` | true                         | Stack status                                  |\n| version            | `version:1` or `version:1.0` or `version:1.0.0`                                                                      | true                         | Application version                           |\n| machine            | `machine:Server` or `Server`                                                                                         | false                        | Machine name                                  |\n| ip                 | `ip:127.0.0.1` or `127.0.0.1`                                                                                        | false                        | IP address                                    |\n| architecture       | `architecture:x64`                                                                                                   | true                         | Machine architecture                          |\n| useragent          | `useragent:IE` or `useragent:\"Mozilla/5.0\"`                                                                          | true                         | User Agent                                    |\n| path               | `path:\"/cart\"` or `\"/cart\"`                                                                                          | false                        | URL path                                      |\n| browser            | `browser:Chrome`                                                                                                     | true                         | Browser                                       |\n| browser.version    | `browser.version:50.0`                                                                                               | true                         | Browser version                               |\n| browser.major      | `browser.major:50`                                                                                                   | true                         | Browser major version                         |\n| device             | `device:iPhone`                                                                                                      | true                         | Device                                        |\n| os                 | `os:iOS`                                                                                                             | true                         | Operating System                              |\n| os.version         | `os.version:8.0`                                                                                                     | true                         | Operating System version                      |\n| os.major           | `os.major:8`                                                                                                         | true                         | Operating System major version                |\n| bot                | `bot:true`                                                                                                           | true                         | bot                                           |\n| error.code         | `error.code:500` or `500`                                                                                            | false                        | Error code                                    |\n| error.message      | `error.message:\"A NullReferenceException occurred\"` or `\"A NullReferenceException occurred\"`                         | false                        | Error message                                 |\n| error.type         | `error.type:\"System.NullReferenceException\"` or `\"System.NullReferenceException\"`                                    | false                        | Error type                                    |\n| error.targettype   | `error.targettype:\"System.NullReferenceException\"` or `\"System.NullReferenceException\"`                              | false                        | Error target type                             |\n| error.targetmethod | `error.targetmethod:AssociateWithCurrentThread` or `AssociateWithCurrentThread`                                      | false                        | Error target method                           |\n| user               | `user:\"random user identifier\"` or `\"random user identifier\"`                                                        | false                        | Uniquely identifies user                      |\n| user.name          | `user:\"Exceptionless User\"` or `\"Exceptionless User\"`                                                                | false                        | Friendly name of user                         |\n| user.description   | `user.description:\"I clicked the button\"` or `\"I clicked the button\"`                                                | false                        | User Description                              |\n| user.email         | `user.email:\"support@exceptionless.io\"` or `\"support@exceptionless.io\"`                                              | false                        | User Email Address                            |\n\n## Multiple Queries\n\nAll queries separated by a space will be an `AND` operation. If you wish to `OR` queries you’ll need to use an `OR` statement. We recommend wrapping conditional statements with parentheses.\n\n**Example:** Lets assume we want to return all events that have a `blue` or `red` tag. To search for these events our query would be `(tag:blue OR tag:red)`.\n\n## Wild Cards\n\nSuffix your query with `*` for wild card searches.\n\n## Exclusions\n\nPrefix the field name with `-` for exclusions.\n\n**Example:** Lets assume that we want to return all events that are not marked as a bot. To search for these events our query would be `-bot:true`.\n*NOTE: In some cases searching with `-bot:true` is more accurate than searching with `bot:false`. This happens because the first query returns all records where `bot` field is `not set` or `not equal to true`. The second query returns results only where the `bot` field is set to `false`.\n\n## Set and Unset Fields\n\nPrefix the field name with `_missing_` or `_exists_`.\n\n**Example:** Lets assume that we want to return all events that do not contain any tags. To search for these events our query would be `_missing_:tag`.\n\n## Ranges\n\nSpecify a `date` or `numeric` range as part of the term.\n\n**Date Range Example:** Lets assume that we want to return all events that occurred in 2020. To search for these events our query would be `date:[2020-01-01 TO 2020-12-31]`.\n\n**Numeric Range Example:** Lets assume that we want to return all events that contain contain a `value` between 1 and 10. To search for these events our query would be `value:(>0 AND <=10)`.\n\n## Custom Extended Data\n\nAll simple data types (`string`, `boolean`, `date`, `number`) that are stored in extended data will be indexed. _NOTE: Field names will be lowercased and escaped. If your field contains a `space` it will be escaped with a -._\n\n**Example:** Lets assume that our events extended data contains a property called `Age` with a value of `18`. To search for this value our query would be `data.age:18`.\n\n***\n\n## Demo Video\n\n<http://www.youtube.com/watch?v=ed8uEVs3IO0>\n\n---\n\n[Next > Bulk Actions](bulk-actions.md) {.text-right}\n",
    "basename": "filtering-and-searching",
    "path": "./content/docs/filtering-and-searching.md"
  },
  "getting-started": {
    "title": "Getting Started",
    "order": 1,
    "preview": "Exceptionless provides you the tools to track errors, logs, and …",
    "content": "\nExceptionless provides you the tools to track errors, logs, and events while guiding you toward actionable solutions. To get started, you'll want to decide if you are self-hosting Exceptionless or using our hosted version. If you choose to use our hosted version, you can get started for free.\n\n## Hosted Option\n\n1. [Create an account](https://be.exceptionless.io/signup)\n2. When you signup, you will be prompted to create your first project.\n3. [Configure your application](https://be.exceptionless.io/project/list) by clicking the Download & Configure Client action button on the project list page.\n4. Select your project type and follow the instructions.\n5. Your application will now automatically send all unhandled errors to the Exceptionless service.\n6. You can also send handled errors, feature usage or log messages along with additional information ([see documentation for your specific client](clients/index.md)).\n\n## Self-Hosted Option\n\nWe have put together comprehensive documentation to help you get started with a self-hosted Exceptionless instance. You can [find that documentation here](self-hosting/index.md).\n\n## Sending Your First Event\n\nOnce you've singed up for an account and created a project, you can start receiving events. Let's take a look at sending a simple event to Exceptionless.\n\nPOST `api/v2/events`\n\n```shell\ncurl --location --request POST \"https://api.exceptionless.com/api/v2/events\" \\\n--header 'Authorization: Bearer YOUR_PROJECT_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"type\": \"error\", \"date\":\"2030-01-01T12:00:00.0000000-05:00\", \"@simple_error\": { \"message\": \"Simple Exception\", \"type\": \"System.Exception\", \"stack_trace\": \" at Client.Tests.ExceptionlessClientTests.CanSubmitSimpleException() in ExceptionlessClientTests.cs:line 77\" } }'\n```\n\n---\n\nYou've got your account created, now what? Let's get a better understanding of how you manage events in Exceptionless and then we can dive into some best practice and ways to enhance your use.\n\n---\n\n[Next > Managing Stacks](managing-stacks.md) {.text-right}\n",
    "basename": "getting-started",
    "path": "./content/docs/getting-started.md"
  },
  "integrations": {
    "title": "Integrations",
    "order": 14,
    "preview": "To make managing events from your application easier, Exceptionless …",
    "content": "\n\nTo make managing events from your application easier, Exceptionless provides some useful integrations. You can access these integrations by clicking the Project dropdown menu, clicking the settings icon next to the project name, then clicking on the Integrations tab on the Settings page. \n\n![Integrations Page Screenshot](./img/integrations.png)\n\nWe provide three integrations: \n\n1. Zapier\n2. Slack\n3. Webhooks\n\n## Zapier\n\nExceptionless has built a [first-class Zapier application](https://zapier.com/apps/exceptionless/integrations) that allows you to connect your Exceptionless account to over 3,000 other apps. To use this, simply sign into your Zapier account and search for Exceptionless. \n\n![Zapier page for Exceptionless](./img/exceptionless_zapier.png)\n\n## Slack\n\nConnecting to Slack is as simple as clicking the Slack integration button. You'll be prompted to sign into your Slack workspace. Once signed in, you can choose the channel for your notifications to be sent to. Then, back on the Settings page, you can configure what types of notifications are sent. \n\n![Slack integration example](./img/exceptionless-slack-settings.png)\n\n## Webhooks\n\nBy configuring a webhook, you are telling Exceptionless to post data to the specified endpoint whenever specific events happen. This is useful in creating custom, bespoke integrations for your Exceptionless account. Configuring a webhook is simple. Click the Add Webhook button on the Settins page and provide the information requested in the modal. \n\n![Webhooks example](./img/exceptionless_webhooks.png)\n\nHere's an example of the event payload (this applies to v2 of the Exceptionless API): \n\n```json\n{\n  \"id\": \"22cd0826e447a44e78877a22\",\n  \"url\": \"http://localhost:5000/event/22cd0826e447a44e78877a22\",\n  \"occurrence_date\": \"2014-01-17T14:37:02.739-06:00\",\n  \"type\": \"error\",\n  \"message\": \"A potentially dangerous Request.Path value was detected from the client (&).\",\n  \"project_id\": \"537650f3b77efe23a47914f4\",\n  \"project_name\": \"Disintegrating Pistol\",\n  \"organization_id\": \"537650f3b77efe23a47914f3\",\n  \"organization_name\": \"Acme\",\n  \"stack_id\": \"1ecd0826e447a44e78877ab1\",\n  \"stack_url\": \"http://localhost:5000/stack/1ecd0826e447a44e78877ab1\",\n  \"stack_title\": \"A potentially dangerous Request.Path value was detected from the client (&).\",\n  \"stack_tags\": [\n    \"Test\"\n  ],\n  \"total_occurrences\": 0,\n  \"first_occurrence\": \"2014-01-17T20:37:02.739Z\",\n  \"last_occurrence\": \"2014-01-17T20:37:02.739Z\",\n  \"is_new\": false,\n  \"is_regression\": false,\n  \"is_critical\": false\n}\n```\n\nTo see both v1 and v2 models for events and stacks, [see this link](https://github.com/exceptionless/Exceptionless/tree/master/tests/Exceptionless.Tests/Plugins/WebHookData).\n\n---\n\n[Next > FAQ](FAQ.md) {.text-right}\n",
    "basename": "integrations",
    "path": "./content/docs/integrations.md"
  },
  "managing-stacks": {
    "title": "Managing Stacks",
    "order": 2,
    "preview": "Perhaps the most important thing you'll do in Exceptionless is …",
    "content": "\n\nPerhaps the most important thing you'll do in Exceptionless is manage your stacks. Think of stacks as your todo list for error management. And like any good todo list, you can drill into a task for more details, mark the task complete, or set the task aside for a later date.\n\nBut what is a stack, exactly? It's pretty simple, actually. A stack is an automatically ([or manually](manual-stacking.md)) grouped list of events. Events can be errors, messages, or logs. Exceptionless will try to automatically group the same events together while gathering as much information about them as possible (i.e. number of users effected, frequency of the event, last occurence). \n\n### Viewing Stacks\n\nNow, let's take a look at how you manage these stacks. When you first sign in, you'll be taken to your dashboard on the Most Frequent view. \n\n![Most Frequent view of stacks on dashboard](img/Most_Frequent.png)\n\nClick on a stack you'd like to manage (We recommend you start with the most frequent event because that's probably pretty annoying for your customers 😉). Clicking on a stack will take you to a detailed view that includes important information such as how many times the event occurred, the number of users impacted, and the first and last occurences of the event.\n\n![Stack Details Example](img/Stack_Details.png)\n\n### Applying Statuses\n\nTo apply a status on a stack, click the dropdown in the top-right and apply the appropriate selection. Selection options include:\n\n* Open  \n* Fixed  \n* Snoozed  \n* Ignored  \n* Discarded  \n\n![Status Options Example](img/Status_Options.png)\n\nMarking the status of a stack will control your [filtering](filtering-and-searching.md) options, but it can also drive your workflow. Ignored stacks may be stacks you have no plans of addressing. Discarded stacks (which do not count against your plan quota) may be stacks that you can't easily prevent from coming through but you don't want to see and don't care about. Snoozing stacks allows you to be reminded at a future point to address the stack in question.\n\nLet's take a look at each status in detail:\n\n**Open** - This status indicates that the error is new or actively occurring. You will receive email notifications for these issues.\n\n**Fixed** - Well, this one means you fixed it. If you look at Exceptionless as your todo list for errors, marking a stack as \"Fixed\" is like checking an item off your todo list. To be more specific, you won't get notifications if you have marked events as fixed. You will have the opportunity to provide your software's version number in which the fix was introduced. If another error comes through of the same kind and it matches the version number that was supposed to fix the issue, your stacks will be marked as \"Regressed\" instead of \"Fixed\". Additionally, if you mark a stack as Fixed but do not supply a version number in which it was fixed, should the event happen again, the stack will be marked as \"Regressed\".\n\n**Snoozed** - Marking a stack as snoozed means you will not get email notifications for whatever period of time you indicate. This is like your alarm clock in the morning. You know you need to take action (like wake up or fix the bug), but you really don't want to yet. Snooze has your back. After the specified period of time, the stacks will once again start alerting you.\n\n**Ignored** - When you ignore a stack, you will no longer receive email notifications unless you change the status. You may choose to do this when you have no intentions of resolving the issue but still want to collect information from the stacks.\n\n**Discarded** - You should use this status when you do not care about the event at all. If \"Ignored\" is turning your back on an event and trying not to see it, \"Discarded\" is putting its feet in cement and dropping it into the middle of a lake. And since these events are sleeping with the fishes, they don't count against your plan quota.\n\nBeyond statuses, you have options to further control your stacks.\n\n### Additional Options\n\n![Options Examples](img/Options.png)\n\nMarking a stack with \"Future Occurences are Critical\" will automatically tag all subsequent events that come into that stack with the critical tag and will make them more prominent for you to review.\n\nThe \"Promote to External\" option allows you to send the stack details to an external source that you've configured through webhooks in the [Integrations](integrations.md) section. This can help you automate issue tracking and project management. For example, you can use this functionality to connect to [Zapier](https://zapier.com), a no-code automation tool. By doing so, you can automatically funnel events from Exceptionless to issues on Github or Jira. You can send text alerts to your devops team (just be smart about this one because those folks need sleep too!), or you can use the data from Exceptionless to build custom dashboards for your entire organization. \n\nAdding a \"Reference Link\" allows you to supply to a link from an external source. This is helpful when a customer files a Github issue, for example. You can link to Github or to a Slack conversation, or anywhere, really.\n\nManaging your stacks is the core focus within Exceptionless, and we try to automate as much as possible for you. However, it is possible to manually stack events, allowing you some of the same management tools outlined here.\n\n---\n\n[Next > Manual Stacking](manual-stacking.md) {.text-right}\n",
    "basename": "managing-stacks",
    "path": "./content/docs/managing-stacks.md"
  },
  "manual-stacking": {
    "title": "Manual Stacking",
    "order": 3,
    "preview": "We try to group events into intuitive stacks, but sometimes you …",
    "content": "\nWe try to group events into intuitive stacks, but sometimes you might want to create your own for organization, reporting, troubleshooting, etc. A good example use case might be when you are introducing a new feature. The errors or events you send to Exceptionless may ultimately look like or be the same as events linked to other features in your applications. However, you might want to see the events triggered by use of this new feature stacked together. \n\nHow might we do this? You can use the `SetManualStackingKey` method to facilitate this need.\n\n## Creating Custom Stacks\n\nIn the below examples, we use `SetManualStackingKey` and are naming the custom stack \"MyCustomStackingKey\" and setting the value to \"ANOTHER FEATURE. What this does is it ensures that any events, regarless of the type or reason for the event, will be grouped together. \n\n![Example manual stacking on dashboard](img/Manual_Key.png)\n\nIn the example above, the events grouped under \"My stack title\" use custom stacking keys to group them together. Let's see how you would do this in practice. \n\n## cURL Example\n\n```\ncurl --location --request POST 'https://api.exceptionless.com/api/v2/events' \\\n--header 'Authorization: Bearer XUlBBdgFxAlmCsAZHDFTIacXpzYuZDuqDzzFYMlR' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{   \"type\": \"error\", \n    \"date\":\"2030-01-01T12:00:00.0000000-05:00\", \n    \"title\": \"NEW FEATURE WORK\", \n    \"@simple_error\": { \n        \"message\": \"Weird Exception\", \n        \"type\": \"System.Exception\", \n        \"stack_trace\": \" at Client.Tests.ExceptionlessClientTests.CanSubmitSimpleException() in ExceptionlessClientTests cs:line 99\" \n    },\n    \"@stack\": { \"title\": \"My stack title\", \"signature_data\": { \"mystackingkey\": \"ANOTHER FEATURE\" }}\n```\n\n## C# Example\n\n```csharp\ntry {\n    throw new ApplicationException(\"Unable to create order from quote.\");\n} catch (Exception ex) {\n    ex.ToExceptionless().SetManualStackingKey(\"MyCustomStackingKey\").Submit();\n}\n```\n\nOr, you can set the stacking directly on an event (e.g., inside a plugin).\n\n```csharp\nevent.SetManualStackingKey(\"MyCustomStackingKey\");\n```\n\n## JavaScript Example\n\n```javascript\nvar client = exceptionless.ExceptionlessClient.default;\n// Node.Js\n// var client = require('exceptionless').ExceptionlessClient.default;\n\ntry {\n  throw new Error('Unable to create order from quote.');\n} catch (error) {\n  client.createException(error).setManualStackingKey('MyCustomStackingKey').submit();\n}\n```\n\n## When Should You Use This\n\nCustom, manual stacking is certainly an advanced feature. We have tried to make your experience fantastic without needing this functionality, but sometimes, there's no avoiding it. So, let's think about some times when you might want to use manual stacking: \n\n* Critical Functionality - if you have a piece of your app that you need see all errors for quickly, manual stacking would be perfect. \n* Logs - we tend to think of stacks as errors, but they don't have to be, and you can easily use manual stacking to group logs for other purposes.  \n* Notifications - manual stacking makes it easy to set up [notifications](notifications.md) for errors or events that happen from a specific source that you define. \n\n---\n\n[Next > Filtering & Searching](filtering-and-searching.md) {.text-right}",
    "basename": "manual-stacking",
    "path": "./content/docs/manual-stacking.md"
  },
  "notifications": {
    "title": "Notifications",
    "order": 11,
    "preview": "To turn on email notifications, go to \"My Account\" in your …",
    "content": "\n\nTo turn on email notifications, go to \"My Account\" in your dashboard, then click on the \"Notifications\" tab.\n\nOnce you're in there, you can select the project you want to edit notifications to, and then select which notifications you want to receive for that selected project.\n\n![Email Notifications](img/email-notification-settings.png)\n\n---\n\n[Next > Log Levels](setting-log-levels.md) {.text-right}\n",
    "basename": "notifications",
    "path": "./content/docs/notifications.md"
  },
  "project-settings": {
    "title": "Project Settings",
    "order": 6,
    "preview": "Exceptionless is different from most error monitoring services in …",
    "content": "\n\nExceptionless is different from most error monitoring services in that it provides you with real-time updates. That includes updates from your Exceptionless project settings to your client. What does that mean? \n\nAll project settings are synced to the client in almost real time, so when an event is submitted to Exceptionless we send down a response header with the current configuration version. If a newer version is available we will immediately retrieve and apply the latest configuration. We will also periodically check for newer configuration when the client is idle.\n\nBy default the client will check after `5 seconds` on client startup (*if no events are submitted on startup*) and then every `2 minutes` after the last event submission for updated configuration settings.\n\n- Checking for updated settings doesn't count towards plan limits.\n- Only the current configuration version is sent when checking for updated settings (no user information will ever be sent).\n- If the settings haven't changed, then no settings will be retrieved.\n\nYou can also **turn off the automatic updating of configuration settings when idle** in each client respectively. Please see the [client specific documentation](#clients).\n\nNow, let's take a look at the available settings for your projects. There are quite a few, so feel free to jump to the section that interests you below: \n\n<!-- - [Clients](#clients) -->\n- [API Keys](#api-keys)\n- [Data Exclusions](#data-exclusions)\n  - [Example usage](#example-usage)\n- [Error Stacking](#error-stacking)\n  - [User Namespaces](#user-namespaces)\n  - [Common Methods](#common-methods)\n- [Spam Detection](#spam-detection)\n- [Client Configuration](#client-configuration)\n- [Event Exclusions](#event-exclusions)\n  - [Example](#example)\n- [Using Client Configuration Settings](#using-client-configuration-settings)\n\n---\n\n<!-- ## Clients\n\nExceptionless has a robust API that can be used through any client interface, but as a convenience, we have provided two Exceptionless client wrappers—one for .NET and one for JavaScript.\n\nEach client wrapper has its own guide to help you get started. Visit either one below. \n\n- [.NET](clients/dotnet/)\n- [JavaScript / Node.js](clients/javascript/) -->\n\n## API Keys\n\nBefore doing anything, you want to create an API Key for your project. This protects you and your team by ensuring you are using a revokable key. Instead of using a user-scoped key that would provide access to everything, a project-scoped key is limited to—you guessed it—a single project.\n\nTo generate an API Key, go to your project settings page and click on the API Keys tab. There, you can click the New API Key button. \n\n![exceptionless api keys](../docs/img/apikeys.png)\n\n## Data Exclusions\n\nData can be excluded from your error reports by specifying the information you'd like excluded. This is especially important when you are dealing with sensitive information. For example, an error on log in might, by default, send a user's password to our server. You probably don't want that, so you can exclude that type of data from being sent. For more on how we handle security issues, check out our [security page](security.md).\n\nTo get started, go to your project settings page, click the Settings tab. \n\n![Settings](img/DataExclusions.png)\n\nA comma delimited list of field names that should be removed from any error report data (e.g., extended data properties, form fields, cookies and query parameters). Data Exclusions can be configured on the project settings page. You can also specify a field name with wildcards `*` to specify starts with, ends with, or contains just to be extra safe.\n\n### Example usage\n\n- Entering `Password` will remove any field **named** `Password` from the report.\n- Entering `Password*` will remove any field that **starts with** `Password` from the report.\n- Entering `*Password` will remove any field that **ends with** `Password` from the report.\n- Entering `*Password*` will remove any field that **contains** `Password` from the report.\n\n---\n\n## Error Stacking\n\nYou can also control how errors are stacked by specifying user namespaces (if you application code utilizes namespaces) or common methods (in all apps) to ignore. Let's take a look at how each works. \n\n### User Namespaces\n\nIf your app runs on .NET or other languages that support namespaces, you can define what namespaces your code runs in. This allows Exceptionless to pick a stacking target within your code. \n\nYou can set this up on the project settings page in the Settings tab. You simply need to provide, a comma delimited list of the namespace names that your applications code belongs to. If this value is set, only methods inside of these namespaces will be considered as stacking targets.\n\n### Common Methods\n\nSlightly different from your namespace definitions above, defining common methods here will *exclude* stacks from building up for specified methods. This is important as you may have catch-all methods in your code or specific methods that you expect to have frequent errors you'd rather not pass to Exceptionless. \n\nYou can set this up on the project settings page in the Settings tab. Simply supply a comma delimited list of common method names that should not be used as stacking targets. \n\n---\n\n## Spam Detection\n\nSpam detection allows you to prevent noise from being tracked. Bots crawling your site or app can contribute to stacks that you simply do not want to see or track. We make it easy to filter these out. \n\nOn your project settings page, click the Settings tab and scroll down to the Spam Detection section. There, you can also specify a comma delimited list of user agents that should be ignored client side. This list supports wildcards and by default covers a vast major of bots. \n\n**Automatic Spam Detection**\n\n![Automatice Spam Filtering](img/Spam_Detection.png)\n\nWe also provide you with a simple tool to automatically detect spam from a single IP address sending in a high volume of activity. Click the checkbox, and we will do the rest.\n\n---\n\n## Client Configuration\n\nCustom client configuration values allow you to control the behavior of your app in real time. They are a dictionary of key value pairs (string key, string value). Usage examples include controlling data exclusions to protecting sensitive data and or enabling/disabling features. \n\nTo set up custom client configurations, click the All Projects drop down in the navigation header when you are signed into Exceptionless. Then, hover over your project name and you'll see a gear icon. Click that icon. This will take you to your project settings screen where you can click the tab called Client Configuration.\n\n![Exceptionless Project Settings](img/project-settings.png)\n\nOnce you have made changes to your Project Settings, the configuration values will only be read by your client if your client is aware of the configuration. This happens out of the box with the [Exceptionless .NET Client](clients/dotnet/index.md) and the [Exceptionless JS Client](clients/javascript/index.md). If you are building your own client or simply wrapping our API, you can still make use of these configuration values by reading them in periodically via a `GET` request to `/api/v2/projects/{id}/config`.\n\n## Event Exclusions\n\nThe Exceptionless clients have the ability to automatically discard events based on client configuration settings. We have a plugin that looks at the client configuration settings using a simple key name convention.\n\nTo help us understand this consider that every event has a `Type` and `Source` property. The `Type` can be anything but we have a few first class types like [`error`, `usage`, `log`, `404`, `session`](https://github.com/exceptionless/Exceptionless/blob/master/src/Exceptionless.Core/Models/Event.cs#L92-L100). `Source` is usually set to the exception type when dealing with `error` events or the `log` source.\n\nWith that said, you can exclude any event type and source by adding a new client configuration key `@@EVENT_TYPE:SOURCE` by replacing the `EVENT_TYPE` and `SOURCE` respectively and specify a configuration value of `false`. _You can also specify a wild card `*` as part of the `SOURCE`._\n\n### Example\n\n- To discard all errors of type `System.ArgumentNullException`:\n  - **KEY:** `@@error:System.ArgumentNullException`\n  - **VALUE:** `false`\n\n- To discard all errors in general you would use a wildcard `*`:\n  - **KEY:** `@@error:*`\n  - **VALUE:** `false`\n\n- To discard all 404s in general you would use a wildcard `*`:\n  - **KEY:** `@@404:*`\n  - **VALUE:** `false`\n\nWe have also added some additional known values to support **minimum log levels**. The known values are: `Trace`, `Debug`, `Info`, `Warn`, `Error`, `Fatal`, `Off`.\n\n- Sets a minimum log level of `Info` for my application:\n  - **KEY:** `@@log:*`\n  - **VALUE:** `Info`\n\n- You can also set a log level on a per log source basis. This will override any general minimum log level (e.g., `@@log:*` you have defined!\n  - **KEY:** `@@log:*AuthController`\n  - **VALUE:** `Trace`\n\n## Using Client Configuration Settings\n\n- [.NET](clients/dotnet/client-configuration-values.md)\n- [JavaScript / Node.js](clients/javascript/client-configuration-values.md)\n\n---\n\n[Next > Versioning](versioning.md) {.text-right}",
    "basename": "project-settings",
    "path": "./content/docs/project-settings.md"
  },
  "references-ids": {
    "title": "Reference Ids",
    "order": 9,
    "preview": "Reference Ids are unique identifiers that let you look up a …",
    "content": "\nReference Ids are unique identifiers that let you look up a submitted event. This is important because _event Ids are not created until after an event is processed, so there's no other way to look up an event_.\n\nReference Ids are also used to help deduplicate events on the server side.\n\n## Uses\n\nOne example of using Reference Ids is to help support your users. For instance, we always include a Reference Id with every error message for our users, allowing them to contact us with that Reference Id and receive help faster because we can easily track it down.\n\n## Reference Id Example\n\nTo attach Reference Ids to our errors in Exceptionless, we register a default Reference Id plugin that sets a Reference Id when the event is submitted and stores the Id in an implementation of ILastReferenceIdManager. With the default plugin, we enable this behavior by calling `UseReferenceIds()` on the configuration object.\n\n## C# Example\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.UseReferenceIds();\n```\n\n## JavaScript Example\n\nThe JavaScript client will automatically manage reference ids.\n\n\nYou can also create your own plugin to create your own Reference Ids.\n\n## Get Last Used Reference Id\n\nCall `GetLastReferenceId()` on the `ExceptionlessClient` instance.\n\n### C# Last Reference Id Example\n\n```csharp\nusing Exceptionless;\n// Get the last created Reference Id\nExceptionlessClient.Default.GetLastReferenceId();\n```\n\n### JavaScript Last Reference Id Example\n\n```javascript\n// Get the last created Reference Id\nexceptionless.ExceptionlessClient.default.getLastReferenceId();\n```\n\n## Displaying Reference Ids to End Users\n\nWe do this for our end users because it allows them to better support their app users.\n\nTo do so, we add a custom `IExceptionHandler` and return a new error response to include the Reference Id as shown below:\n\n```csharp\npublic class ExceptionlessReferenceIdExceptionHandler : IExceptionHandler {\n    public Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken) {\n        if (context == null)\n            throw new ArgumentNullException(nameof(context));\n\n        var exceptionContext = context.ExceptionContext;\n        var request = exceptionContext.Request;\n        if (request == null)\n            throw new ArgumentException($\"{typeof(ExceptionContext).Name}.{\"Request\"} must not be null\", nameof(context));\n\n        context.Result = new ResponseMessageResult(CreateErrorResponse(request, exceptionContext.Exception, HttpStatusCode.InternalServerError));\n        return TaskHelper.Completed();\n    }\n\n    private HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, Exception ex, HttpStatusCode statusCode) {\n        HttpConfiguration configuration = request.GetConfiguration();\n        HttpError error = new HttpError(ex, request.ShouldIncludeErrorDetail());\n\n        string lastId = ExceptionlessClient.Default.GetLastReferenceId();\n        if (!String.IsNullOrEmpty(lastId))\n            error.Add(\"Reference\", lastId);\n\n        // CreateErrorResponse should never fail, even if there is no configuration associated with the request\n        // In that case, use the default HttpConfiguration to con-neg the response media type\n        if (configuration == null) {\n            using (HttpConfiguration defaultConfig = new HttpConfiguration()) {\n                return request.CreateResponse(statusCode, error, defaultConfig);\n            }\n        }\n\n        return request.CreateResponse(statusCode, error, configuration);\n    }\n}\n```\n\nThen we replace the existing `IExceptionFilter`\n\n```csharp\nConfig.Services.Replace(typeof(IExceptionHandler), new ExceptionlessReferenceIdExceptionHandler());\n```\n\nNow you'll get a user friendly error response that contains a Reference Id, like:\n\n`{\n  \"message\": \"An error has occurred.\",\n  “reference”: “411085622e”\n}`\n\n## Looking up Events by Reference Id\n\nLink directly to an event by outputting a link in your UI or log files, like\n`https://be.exceptionless.io/event/by-ref/YOUR_REFERENCE_ID)`\n\nOr you can search via the api/ui with `reference:YOUR_REFERENCE_ID`\n\n---\n\n[Next > User Sessions](user-sessions.md) {.text-right}\n",
    "basename": "references-ids",
    "path": "./content/docs/references-ids.md"
  },
  "security": {
    "title": "Security",
    "order": 17,
    "preview": "Exceptionless follows industry best practices and uses SSL out of …",
    "content": "\nExceptionless follows industry best practices and uses SSL out of the box to be as secure as possible. We also provide you with the tools to take your information security to the next level. These tools include Data Exlusions. To accommodate various data protection laws, Exceptionless allows you to prevent the transmission of specified pieces of information through Data Exclusions.\n\n### Data Exclusions\n\nThese exclusions are simply a comma delimited list of field names that should be removed from any error report data (e.g., extended data properties, form fields, cookies and query parameters). Data Exclusions can be configured on the project settings page. You can also specify a field name with wildcards `*` to specify starts with, ends with, or contains just to be extra safe.\n\n#### Example usage:\n\nEntering `Password` will remove any field **named** `Password` from the report.\nEntering `Password*` will remove any field that **starts with** `Password` from the report.\nEntering `*Password` will remove any field that **ends with** `Password` from the report.\nEntering `*Password*` will remove any field that **contains** `Password` from the report.\n\n[See more on data exclusions here](project-settings/#data-exclusions).\n\n---\n\n[Next > API Usage](api/index.md) {.text-right}",
    "basename": "security",
    "path": "./content/docs/security.md"
  },
  "docker": {
    "title": "Docker",
    "order": 20,
    "preview": "If you would like to test Exceptionless locally, please follow this …",
    "content": "\nIf you would like to test Exceptionless locally, please follow this section.\n\n## Requirements\n\n* [Docker](https://www.docker.com)\n\n## Testing Setup\n\nRuns Exceptionless without persisting data between runs. Good for checking out Exceptionless for the first time and testing.\n\n```bash\ndocker run --rm -it -p 5000:80 exceptionless/exceptionless:latest\n```\n\n## Simple Setup\n\nRuns a very simple non-production setup for Exceptionless with data persisted between runs in a sub-directory of the current directory called `esdata`. It uses an embedded single node Elasticsearch cluster and does not have backups. It is recommended that you create your own Elasticsearch cluster for production deployments of Exceptionless.\n\nOn Linux:\n\n```bash\ndocker run --rm -it -p 5000:80 \\\n    -v $(pwd)/esdata:/usr/share/elasticsearch/data \\\n    exceptionless/exceptionless:latest\n```\n\nOn PowerShell:\n\n```powershell\ndocker run --rm -it -p 5000:80 `\n    -v ${PWD}/esdata:/usr/share/elasticsearch/data `\n    exceptionless/exceptionless:latest\n```\n\n## Simple Setup w/SSL Support and SMTP\n\nRuns a very simple non-production setup for Exceptionless with data persisted between runs in a sub-directory of the current directory called `esdata`. It uses an embedded single node Elasticsearch cluster and does not have backups. It is recommended that you create your own Elasticsearch cluster for production deployments of Exceptionless. In the SMTP password characters disallowed or reserved according to RFC-2396 (e.g. @:#/?+) need to be percent-encoded (e.g. # => %23).\n\nOn Linux:\n\n```bash\ndocker run --rm -it -p 5000:80 -p 5001:443 \\\n    -e EX_ConnectionStrings__Email=smtps://user:password@smtp.host.com:587 \\\n    -e ASPNETCORE_URLS=\"https://+;http://+\" \\\n    -e ASPNETCORE_HTTPS_PORT=5001 \\\n    -e ASPNETCORE_Kestrel__Certificates__Default__Password=\"password\" \\\n    -e ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx \\\n    -v ~/.aspnet/https:/https/ \\\n    -v $(PWD)/esdata:/usr/share/elasticsearch/data \\\n    exceptionless/exceptionless:latest\n```\n\nOn PowerShell:\n\n```powershell\ndocker run --rm -it -p 5000:80 -p 5001:443 `\n    -e EX_ConnectionStrings__Email=smtps://user:password@smtp.host.com:587 `\n    -e ASPNETCORE_URLS=\"https://+;http://+\" `\n    -e ASPNETCORE_HTTPS_PORT=5001 `\n    -e ASPNETCORE_Kestrel__Certificates__Default__Password=\"password\" `\n    -e ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx `\n    -v ~/.aspnet/https:/https/ `\n    -v ${PWD}/esdata:/usr/share/elasticsearch/data `\n    exceptionless/exceptionless:latest\n```\n\n---\n\n[Next > Kubernetes](kubernetes.md) {.text-right}\n",
    "basename": "docker",
    "path": "./content/docs/self-hosting/docker.md"
  },
  "kubernetes": {
    "title": "Kubernetes",
    "order": 21,
    "preview": "Please follow this section to set up Exceptionless in a Kubernetes …",
    "content": "\nPlease follow this section to set up Exceptionless in a Kubernetes environment. Please note this section is a work in progress, any contributions is greatly appreciated.\n\n## Requirements\n\n* [Kubernetes](https://kubernetes.io)\n* [Helm](https://helm.sh)\n\n## Instructions\n\nPlease note that we recommend you use Kubernetes for running in production.\n\n1. Follow the steps [here](https://github.com/exceptionless/Exceptionless/blob/master/k8s/ex-setup.ps1) for how to create it in AKS\n2. View the configuration settings below for more information on configuring Exceptionless.\n3. [Configure your clients](../clients/) to send errors to your website.\n\nNow, you can create a local account, organization, and project and send events to it.\n\n## Configuration\n\nThe following section will cover how to configure exceptionless inside of a Kubernetes instance using the `exceptionless-config` config map. All exceptionless configuration keys are prefixed with `EX_`. Please note that these instructions also apply to docker using environment variables.\n\nAll configuration options and settings can be found in the various option classes located [here](https://github.com/exceptionless/Exceptionless/tree/master/src/Exceptionless.Core/Configuration).\n\n_Please note that if you are specifying configuration via `docker-compose`, then you will need to drop the `EX_` and `EX_ConnectionStrings__` prefixes._\n\n## ConnectionStrings\n\n```yaml\n# connection string used for any provider specifying Redis.\nEX_ConnectionStrings__Redis: server=localhost:6379,abortConnect=false\n\nEX_ConnectionStrings__Cache: provider=redis;\nEX_ConnectionStrings__Elasticsearch: server=http://10.0.0.4:9200;\nEX_ConnectionStrings__Email: smtps://user%40domain.com:password@smtp.domain.com:465\nEX_ConnectionStrings__MessageBus: provider=redis;\nEX_ConnectionStrings__Metrics: provider=statsd;server=localhost\nEX_ConnectionStrings__Queue: provider=redis;\nEX_ConnectionStrings__Storage: provider=azurestorage;\n```\n\nYou can append values to any connection string using a `;`. For example, you can control many shards and replicas each Elasticsearch index should be created with by appending to the `EX_ConnectionStrings__Elasticsearch` connection string. For a Elasticsearch cluster (3 nodes, two masters), you would append `shards=3;replicas=1`.\n\nThe `provider` value determines what implementations to use for the various abstractions. We've made it easier to reuse a single connection string by automatically looking up a connection string by the provider name and adding any key value pairs to the current connection string (as shown above with redis).\n\n## General Configuration\n\n1. You'll want to set the `EX_ApiUrl` key to your external url of the api.\n2. You'll want to set the `EX_BaseUrl` key to your external url of the website. If you are not following the clean urls optional section below, please make sure you also add the hashbang (`/#!`) to the base url.\n3. `EX_AppMode` should be set to `Production` if you want to send unrestricted emails.\n4. Please take a quick look at all the configuration options and settings that can be found in the various option classes located [here](https://github.com/exceptionless/Exceptionless/tree/master/src/Exceptionless.Core/Configuration).\n\n## Active Directory Authentication\n\nTo enable Active Directory authentication, update the Update the `exceptionless-config` config map to include the `EX_ConnectionStrings__LDAP` connection string. The value should be your domain's LDAP URI (e.g. `LDAP://ad.domain.com/` or `LDAP://ad.domain.com/DC=domain,DC=com`).\n\nPlease note the following:\n\n1. Users must still go through the registration process using their AD credentials. This allows account setup to proceed as normal. AD credentials are **not** stored.\n2. Exceptionless relies on the following properties being available in AD:\n    * `mail`: user's email address\n    * `givenName`: user's first name\n    * `sn`: user's last name\n    * `sAMAccountName`: user's username\n3. To ensure the correct account information is retrieved for a user, consider using a more specific connection string to narrow down the LDAP account type. For example: `LDAP://ad.domain.com/OU=Standard Users,OU=User Accounts,DC=domain,DC=com`\n\n## Enabling Slack Integrations\n\n1. Create a Slack app for your workspace\n    * __Please do not distribute your app outside of your organization.__\n2. Go to the `OAuth & Permissions` feature. Add a new redirect URL. The redirect URL should be your Exceptionless base URL.\n3. On the *basic info* page of your Slack App, you will need to find the Client ID and Client Secret\n4. Update the `exceptionless-config` config map `ConnectionStrings__OAuth` value to include `SlackId=YOUR_ID;SlackSecret=YOUR_SECRET;` and restart the associated pods.\n5. If you've already loaded a page in Exceptionless, you will need to do a hard refresh for the config changes to apply.\n\n## Upgrading\n\nPlease see the [Upgrading](upgrading-self-hosted-instance.md) for details on how to upgrade to the current version.\n\n## Troubleshooting\n\nIf you are having issues please try the following to resolve the issues. If this doesn't work please open an issue or contact us on [Discord](https://discord.gg/xv3sjurVwA).\n\n* Make sure you are running the latest release by visiting our [releases page](https://github.com/exceptionless/Exceptionless/releases). You can verify the version you are currently running by accessing the status page [`http://localhost/api/v2/about`](http://localhost/api/v2/about).\n* You can also enable detailed logging by updating the `Serilog__MinimumLevel__Default` config map value to `Debug`.\n\n---\n\n[Next > Upgrading](upgrading-self-hosted-instance.md) {.text-right}",
    "basename": "kubernetes",
    "path": "./content/docs/self-hosting/kubernetes.md"
  },
  "upgrading-self-hosted-instance": {
    "title": "Upgrading",
    "order": 22,
    "preview": "**Please ensure that you have created backups before upgrading!**\n …",
    "content": "\n**Please ensure that you have created backups before upgrading!**\n\n**If you are upgrading from v1 or [v2](https://github.com/exceptionless/Exceptionless/releases/tag/v2.0.0) you will need to upgrade to [v3.0](https://github.com/exceptionless/Exceptionless/releases/tag/v3.0.0) before upgrading to the latest release.**\n\n## Upgrading from v6 to v7\n\nA migration job will need to be run as there are several in place data migrations that need to be applied. The migrations will add new index mappings for soft delete support as well as stack status and populate various stack fields with data.\n\n1. You'll need to run an out of process `Migration` job. In order to do this you'll need to update configuration to ensure it's pointing to your Elasticsearch (e.g., `EX_ConnectionStrings__Elasticsearch` environment variable/connection string) and Redis instances.\n2. Scale down existing Exceptionless apps and jobs.\n3. Start the `Migration` job.\n   1. For docker, you just need to pass the `Migration` argument to the `exceptionless/job` container image (e.g., `docker run exceptionless/job:latest Migration`). Please remember to pass any configuration settings (e.g., connection strings) to the migration job.\n   2. For Kubernetes, you can run [`kubectl apply -f manual-migration-job.yaml`](https://github.com/exceptionless/Exceptionless/blob/master/k8s/manual-migration-job.yaml). Please note that you may have to tweak namespaces and container image version.\n4. Scale back up and you should be good to go.\n\n## Upgrading from v5 to v6\n\nVersion 6 added support for Elasticsearch 7, which requires a complete data migration from Elasticsearch 5.x. This tutorial assumes you have docker/Kubernetes installed and have followed the [setup guide](../self-hosting/index.md).\n\n1. Create a new Elasticsearch 7 cluster or modify your existing `docker-compose` file to also include our Elasticsearch 7.x image (There will need to be two Elasticsearch docker instances (5.x and 7.x). Please note that we've included the Elasticsearch major version number in the data path of the docker data path, this allows you to run two versions side by side without losing the data.\n2. Add a new environment variable or config map setting for `EX_ElasticsearchToMigrate` with the value of the `EX_Elasticsearch` 5.x connection string.\n3. Add your existing Elasticsearch instance to `reindex.remote.whitelist` in Elasticsearch 7's `elasticsearch.yml`. Make sure you include the port as well, for example `reindex.remote.whitelist: 127.0.0.1:9200`.\n4. Update the existing `EX_Elasticsearch` environment variable or config map entry to point to the Elasticsearch 7.x Cluster.\n5. Scale down existing Exceptionless apps and jobs.\n6. Start the Data Migration by running the `DataMigration` job. You can run it by opening the CLI and executing `dotnet Exceptionless.Job.dll DataMigration`. If you receive a warning that the port is already used, you need to change `ASPNETCORE_URLS` first, for example `ASPNETCORE_URLS=http://+:808`. You can also run an incremental reindex by setting the `EX_ReindexCutOffDate` with a date value (E.G., `2022-01-28T18:00:00.00Z`., environment variable or config map entry and rerunning the Migration Job.\n7. Scale up the rest of the app!\n\n## Upgrading from v4 to v5\n\nWe now only provide official docker images as release artifacts. This tutorial assumes you have docker/Kubernetes installed and have followed the [setup guide](../self-hosting/index.md).\n\n1. We now can run on linux or windows as we are running on ASP.NET Core! As a result we've completely redone the configuration. For the most part we've prefixed configuration with `EX_` and simplified it as much as possible. I'd recommend taking a look at your previous configuration settings and then read over the following [configuration document](/docs/self-hosting/kubernetes/#configuration) to migrate your settings.\n2. Please note that no Elasticsearch changes are required. You can continue to use your existing Elasticsearch cluster. You just need to update the connection string by following step 1.\n3. Please note that the UI and API no longer run on the same port as they are now two different docker images. You may need to update your server url accordingly in your client applications.\n\n## Upgrading from v3 to v4\n\nThis process requires you to setup and configure a new Elasticsearch 5 instance and reindex your existing Elasticsearch 1.x data into the Elasticsearch 5 instance using [external reindexing](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html). This tutorial assumes you have Elasticsearch 5 Kibana instance installed and configured.\n\n1. Edit the Elasticsearch 5's `elasticsearch.yml` configuration file.\n    1. Add the `reindex.remote.whitelist: 10.0.0.9:9200` setting with a value that contains the IP address or hostname of the 1.x server. This allows you to reindex the 1.x data into your new 5.x instance.\n    2. Temporarily comment out (with a leading `#`) the following line: `#action.auto_create_index: .security,.monitoring*,.watches,.triggered_watches,.watcher-history*`\n    3. Restart the elasticsearch service.\n2. Open Kibana (E.G., [http://localhost:5601](http://localhost:5601)) and execute the following scripts to reindex your data.\n\n### Create Organization Index with the correct mappings:\n\n```json\nPUT organizations-v1\n{\n  \"settings\": {\n    \"index.number_of_replicas\": 1,\n    \"index.number_of_shards\": 3,\n    \"analysis\": {\n      \"analyzer\": {\n        \"keyword_lowercase\": {\n          \"type\": \"custom\",\n          \"filter\": [\n            \"lowercase\"\n          ],\n          \"tokenizer\": \"keyword\"\n        }\n      }\n    }\n  },\n  \"aliases\": {\n    \"organizations\": {}\n  },\n  \"mappings\": {\n    \"organization\": {\n      \"dynamic\": false,\n      \"properties\": {\n        \"id\": {\n          \"type\": \"keyword\"\n        },\n        \"created_utc\": {\n          \"type\": \"date\"\n        },\n        \"updated_utc\": {\n          \"type\": \"date\"\n        },\n        \"name\": {\n          \"type\": \"text\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\",\n              \"ignore_above\": 256\n            }\n          }\n        },\n        \"stripe_customer_id\": {\n          \"type\": \"keyword\"\n        },\n        \"has_premium_features\": {\n          \"type\": \"boolean\"\n        },\n        \"plan_id\": {\n          \"type\": \"keyword\"\n        },\n        \"plan_name\": {\n          \"type\": \"keyword\",\n          \"ignore_above\": 256\n        },\n        \"subscribe_date\": {\n          \"type\": \"date\"\n        },\n        \"billing_status\": {\n          \"type\": \"float\"\n        },\n        \"billing_price\": {\n          \"type\": \"double\"\n        },\n        \"is_suspended\": {\n          \"type\": \"boolean\"\n        },\n        \"retention_days\": {\n          \"type\": \"integer\"\n        },\n        \"invites\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"token\": {\n              \"type\": \"keyword\"\n            },\n            \"email_address\": {\n              \"type\": \"text\",\n              \"analyzer\": \"keyword_lowercase\"\n            }\n          }\n        },\n        \"usage\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"date\": {\n              \"type\": \"date\"\n            },\n            \"total\": {\n              \"type\": \"float\"\n            },\n            \"blocked\": {\n              \"type\": \"float\"\n            },\n            \"limit\": {\n              \"type\": \"float\"\n            },\n            \"too_big\": {\n              \"type\": \"float\"\n            }\n          }\n        },\n        \"overage_hours\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"date\": {\n              \"type\": \"date\"\n            },\n            \"total\": {\n              \"type\": \"float\"\n            },\n            \"blocked\": {\n              \"type\": \"float\"\n            },\n            \"limit\": {\n              \"type\": \"float\"\n            },\n            \"too_big\": {\n              \"type\": \"float\"\n            }\n          }\n        }\n      }\n    },\n    \"project\": {\n      \"dynamic\": false,\n      \"properties\": {\n        \"id\": {\n          \"type\": \"keyword\"\n        },\n        \"created_utc\": {\n          \"type\": \"date\"\n        },\n        \"updated_utc\": {\n          \"type\": \"date\"\n        },\n        \"organization_id\": {\n          \"type\": \"keyword\"\n        },\n        \"name\": {\n          \"type\": \"text\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\",\n              \"ignore_above\": 256\n            }\n          }\n        },\n        \"next_summary_end_of_day_ticks\": {\n          \"type\": \"long\"\n        }\n      }\n    },\n    \"token\": {\n      \"dynamic\": false,\n      \"properties\": {\n        \"id\": {\n          \"type\": \"keyword\"\n        },\n        \"created_utc\": {\n          \"type\": \"date\"\n        },\n        \"updated_utc\": {\n          \"type\": \"date\"\n        },\n        \"expires_utc\": {\n          \"type\": \"date\"\n        },\n        \"organization_id\": {\n          \"type\": \"keyword\"\n        },\n        \"project_id\": {\n          \"type\": \"keyword\"\n        },\n        \"default_project_id\": {\n          \"type\": \"keyword\"\n        },\n        \"user_id\": {\n          \"type\": \"keyword\"\n        },\n        \"refresh\": {\n          \"type\": \"keyword\"\n        },\n        \"scopes\": {\n          \"type\": \"keyword\"\n        },\n        \"type\": {\n          \"type\": \"byte\"\n        }\n      }\n    },\n    \"user\": {\n      \"dynamic\": false,\n      \"properties\": {\n        \"id\": {\n          \"type\": \"keyword\"\n        },\n        \"created_utc\": {\n          \"type\": \"date\"\n        },\n        \"updated_utc\": {\n          \"type\": \"date\"\n        },\n        \"organization_ids\": {\n          \"type\": \"keyword\"\n        },\n        \"full_name\": {\n          \"type\": \"text\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\",\n              \"ignore_above\": 256\n            }\n          }\n        },\n        \"email_address\": {\n          \"type\": \"text\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\",\n              \"ignore_above\": 256\n            }\n          },\n          \"analyzer\": \"keyword_lowercase\"\n        },\n        \"verify_email_address_token\": {\n          \"type\": \"keyword\"\n        },\n        \"password_reset_token\": {\n          \"type\": \"keyword\"\n        },\n        \"roles\": {\n          \"type\": \"keyword\"\n        },\n        \"o_auth_accounts\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"provider\": {\n              \"type\": \"keyword\"\n            },\n            \"provider_user_id\": {\n              \"type\": \"keyword\"\n            },\n            \"username\": {\n              \"type\": \"keyword\"\n            }\n          }\n        }\n      }\n    },\n    \"webhook\": {\n      \"dynamic\": false,\n      \"properties\": {\n        \"id\": {\n          \"type\": \"keyword\"\n        },\n        \"created_utc\": {\n          \"type\": \"date\"\n        },\n        \"organization_id\": {\n          \"type\": \"keyword\"\n        },\n        \"project_id\": {\n          \"type\": \"keyword\"\n        },\n        \"url\": {\n          \"type\": \"keyword\"\n        },\n        \"event_types\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}\n```\n\n### Reindex Organization data from 1.x into 5.x **Please make sure you update the host name**:\n\n```json\nPOST _reindex\n{\n  \"source\": {\n    \"remote\": {\n      \"host\": \"http://10.0.0.9:9200\"\n    },\n    \"index\": \"organizations-v1\"\n  },\n  \"dest\": {\n    \"index\": \"organizations-v1\",\n    \"op_type\": \"create\"\n  },\n  \"script\": {\n    \"inline\": \"if (ctx._source.modified_utc != null) { ctx._source.updated_utc = ctx._source.remove('modified_utc'); }\",\n    \"lang\": \"painless\"\n  }\n}\n```\n\n### Create Stack Index with the correct mappings:\n\n```json\nPUT stacks-v1\n{\n  \"settings\": {\n    \"index.number_of_replicas\": 1,\n    \"index.number_of_shards\": 3\n  },\n  \"aliases\": {\n    \"stacks\": {}\n  },\n  \"mappings\": {\n    \"stacks\": {\n      \"include_in_all\": false,\n      \"dynamic\": false,\n      \"properties\": {\n        \"id\": {\n          \"type\": \"keyword\"\n        },\n        \"organization_id\": {\n          \"type\": \"keyword\"\n        },\n        \"project_id\": {\n          \"type\": \"keyword\"\n        },\n        \"signature_hash\": {\n          \"type\": \"keyword\"\n        },\n        \"type\": {\n          \"type\": \"keyword\"\n        },\n        \"first_occurrence\": {\n          \"type\": \"date\"\n        },\n        \"last_occurrence\": {\n          \"type\": \"date\"\n        },\n        \"title\": {\n          \"type\": \"text\",\n          \"boost\": 1.1,\n          \"include_in_all\": true\n        },\n        \"description\": {\n          \"type\": \"text\",\n          \"include_in_all\": true\n        },\n        \"tags\": {\n          \"type\": \"text\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\",\n              \"ignore_above\": 256\n            }\n          },\n          \"boost\": 1.2,\n          \"include_in_all\": true\n        },\n        \"references\": {\n          \"type\": \"text\",\n          \"include_in_all\": true\n        },\n        \"date_fixed\": {\n          \"type\": \"date\"\n        },\n        \"fixed\": {\n          \"type\": \"boolean\"\n        },\n        \"fixed_in_version\": {\n          \"type\": \"keyword\"\n        },\n        \"is_hidden\": {\n          \"type\": \"boolean\"\n        },\n        \"is_regressed\": {\n          \"type\": \"boolean\"\n        },\n        \"occurrences_are_critical\": {\n          \"type\": \"boolean\"\n        },\n        \"total_occurrences\": {\n          \"type\": \"integer\"\n        }\n      }\n    }\n  }\n}\n```\n\n### Reindex Stack data from 1.x into 5.x **Please make sure you update the host name**:\n\n```json\nPOST _reindex\n{\n  \"source\": {\n    \"remote\": {\n      \"host\": \"http://10.0.0.9:9200\"\n    },\n    \"index\": \"stacks-v1\"\n  },\n  \"dest\": {\n    \"index\": \"stacks-v1\",\n    \"op_type\": \"create\"\n  }\n}\n```\n\n### Create Event Template so daily indexes can be created with the correct mappings:\n\n```json\nPUT _template/events-v1\n{\n  \"template\": \"events-v1-*\",\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1,\n    \"analysis\": {\n      \"analyzer\": {\n        \"comma_whitespace\": {\n          \"type\": \"pattern\",\n          \"pattern\": \"[,\\\\s]+\"\n        },\n        \"email\": {\n          \"type\": \"custom\",\n          \"filter\": [\n            \"email\",\n            \"lowercase\",\n            \"unique\"\n          ],\n          \"tokenizer\": \"keyword\"\n        },\n        \"version_index\": {\n          \"type\": \"custom\",\n          \"filter\": [\n            \"version_pad1\",\n            \"version_pad2\",\n            \"version_pad3\",\n            \"version_pad4\",\n            \"version\",\n            \"lowercase\",\n            \"unique\"\n          ],\n          \"tokenizer\": \"whitespace\"\n        },\n        \"version_search\": {\n          \"type\": \"custom\",\n          \"filter\": [\n            \"version_pad1\",\n            \"version_pad2\",\n            \"version_pad3\",\n            \"version_pad4\",\n            \"lowercase\"\n          ],\n          \"tokenizer\": \"whitespace\"\n        },\n        \"whitespace_lower\": {\n          \"type\": \"custom\",\n          \"filter\": [\n            \"lowercase\"\n          ],\n          \"tokenizer\": \"whitespace\"\n        },\n        \"typename\": {\n          \"type\": \"custom\",\n          \"filter\": [\n            \"typename\",\n            \"lowercase\",\n            \"unique\"\n          ],\n          \"tokenizer\": \"typename_hierarchy\"\n        },\n        \"standardplus\": {\n          \"type\": \"custom\",\n          \"filter\": [\n            \"standard\",\n            \"typename\",\n            \"lowercase\",\n            \"stop\",\n            \"unique\"\n          ],\n          \"tokenizer\": \"comma_whitespace\"\n        }\n      },\n      \"filter\": {\n        \"email\": {\n          \"type\": \"pattern_capture\",\n          \"patterns\": [\n            \"(\\\\w+)\",\n            \"(\\\\p{L}+)\",\n            \"(\\\\d+)\",\n            \"(.+)@\",\n            \"@(.+)\"\n          ]\n        },\n        \"typename\": {\n          \"type\": \"pattern_capture\",\n          \"patterns\": [\n            \"\\\\.(\\\\w+)\",\n            \"([^\\\\()]+)\"\n          ]\n        },\n        \"version\": {\n          \"type\": \"pattern_capture\",\n          \"patterns\": [\n            \"^(\\\\d+)\\\\.\",\n            \"^(\\\\d+\\\\.\\\\d+)\",\n            \"^(\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\"\n          ]\n        },\n        \"version_pad1\": {\n          \"type\": \"pattern_replace\",\n          \"pattern\": \"(\\\\.|^)(\\\\d{1})(?=\\\\.|-|$)\",\n          \"replacement\": \"$10000$2\"\n        },\n        \"version_pad2\": {\n          \"type\": \"pattern_replace\",\n          \"pattern\": \"(\\\\.|^)(\\\\d{2})(?=\\\\.|-|$)\",\n          \"replacement\": \"$1000$2\"\n        },\n        \"version_pad3\": {\n          \"type\": \"pattern_replace\",\n          \"pattern\": \"(\\\\.|^)(\\\\d{3})(?=\\\\.|-|$)\",\n          \"replacement\": \"$100$2\"\n        },\n        \"version_pad4\": {\n          \"type\": \"pattern_replace\",\n          \"pattern\": \"(\\\\.|^)(\\\\d{4})(?=\\\\.|-|$)\",\n          \"replacement\": \"$10$2\"\n        }\n      },\n      \"tokenizer\": {\n        \"comma_whitespace\": {\n          \"type\": \"pattern\",\n          \"pattern\": \"[,\\\\s]+\"\n        },\n        \"typename_hierarchy\": {\n          \"type\": \"path_hierarchy\",\n          \"delimiter\": \".\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"events\": {\n        \"dynamic\": \"false\",\n        \"include_in_all\": false,\n        \"_all\": {\n          \"analyzer\": \"standardplus\",\n          \"search_analyzer\": \"whitespace_lower\"\n        },\n        \"_size\": {\n          \"enabled\": true\n        },\n        \"dynamic_templates\": [\n          {\n            \"idx_reference\": {\n              \"match\": \"*-r\",\n              \"mapping\": {\n                \"ignore_above\": 256,\n                \"type\": \"keyword\"\n              }\n            }\n          }\n        ],\n        \"properties\": {\n          \"count\": {\n            \"type\": \"integer\"\n          },\n          \"created_utc\": {\n            \"type\": \"date\"\n          },\n          \"data\": {\n            \"properties\": {\n              \"@environment\": {\n                \"properties\": {\n                  \"architecture\": {\n                    \"type\": \"keyword\"\n                  },\n                  \"ip_address\": {\n                    \"type\": \"text\",\n                    \"index\": false,\n                    \"copy_to\": [\n                      \"ip\"\n                    ],\n                    \"include_in_all\": true\n                  },\n                  \"machine_name\": {\n                    \"type\": \"text\",\n                    \"boost\": 1.1,\n                    \"fields\": {\n                      \"keyword\": {\n                        \"type\": \"keyword\",\n                        \"ignore_above\": 256\n                      }\n                    },\n                    \"include_in_all\": true\n                  },\n                  \"o_s_name\": {\n                    \"type\": \"text\",\n                    \"copy_to\": [\n                      \"os\"\n                    ]\n                  }\n                }\n              },\n              \"@error\": {\n                \"properties\": {\n                  \"data\": {\n                    \"properties\": {\n                      \"@target\": {\n                        \"properties\": {\n                          \"ExceptionType\": {\n                            \"type\": \"text\",\n                            \"index\": false,\n                            \"copy_to\": [\n                              \"error.targettype\"\n                            ],\n                            \"include_in_all\": true\n                          },\n                          \"Method\": {\n                            \"type\": \"text\",\n                            \"index\": false,\n                            \"copy_to\": [\n                              \"error.targetmethod\"\n                            ],\n                            \"include_in_all\": true\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              \"@level\": {\n                \"type\": \"text\",\n                \"fields\": {\n                  \"keyword\": {\n                    \"type\": \"keyword\",\n                    \"ignore_above\": 256\n                  }\n                }\n              },\n              \"@location\": {\n                \"properties\": {\n                  \"country\": {\n                    \"type\": \"keyword\"\n                  },\n                  \"level1\": {\n                    \"type\": \"keyword\"\n                  },\n                  \"level2\": {\n                    \"type\": \"keyword\"\n                  },\n                  \"locality\": {\n                    \"type\": \"keyword\"\n                  }\n                }\n              },\n              \"@request\": {\n                \"properties\": {\n                  \"client_ip_address\": {\n                    \"type\": \"text\",\n                    \"index\": false,\n                    \"copy_to\": [\n                      \"ip\"\n                    ],\n                    \"include_in_all\": true\n                  },\n                  \"data\": {\n                    \"properties\": {\n                      \"@browser\": {\n                        \"type\": \"text\",\n                        \"fields\": {\n                          \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                          }\n                        }\n                      },\n                      \"@browser_major_version\": {\n                        \"type\": \"text\"\n                      },\n                      \"@browser_version\": {\n                        \"type\": \"text\",\n                        \"fields\": {\n                          \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                          }\n                        }\n                      },\n                      \"@device\": {\n                        \"type\": \"text\",\n                        \"fields\": {\n                          \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                          }\n                        }\n                      },\n                      \"@is_bot\": {\n                        \"type\": \"boolean\"\n                      },\n                      \"@os\": {\n                        \"type\": \"text\",\n                        \"index\": false,\n                        \"copy_to\": [\n                          \"os\"\n                        ]\n                      },\n                      \"@os_major_version\": {\n                        \"type\": \"text\"\n                      },\n                      \"@os_version\": {\n                        \"type\": \"text\",\n                        \"fields\": {\n                          \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                          }\n                        }\n                      }\n                    }\n                  },\n                  \"path\": {\n                    \"type\": \"text\",\n                    \"fields\": {\n                      \"keyword\": {\n                        \"type\": \"keyword\",\n                        \"ignore_above\": 256\n                      }\n                    },\n                    \"include_in_all\": true\n                  },\n                  \"user_agent\": {\n                    \"type\": \"text\",\n                    \"fields\": {\n                      \"keyword\": {\n                        \"type\": \"keyword\",\n                        \"ignore_above\": 256\n                      }\n                    }\n                  }\n                }\n              },\n              \"@simple_error\": {\n                \"properties\": {\n                  \"data\": {\n                    \"properties\": {\n                      \"@target\": {\n                        \"properties\": {\n                          \"ExceptionType\": {\n                            \"type\": \"text\",\n                            \"index\": false,\n                            \"copy_to\": [\n                              \"error.targettype\"\n                            ],\n                            \"include_in_all\": true\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              \"@submission_method\": {\n                \"type\": \"text\",\n                \"fields\": {\n                  \"keyword\": {\n                    \"type\": \"keyword\",\n                    \"ignore_above\": 256\n                  }\n                }\n              },\n              \"@user\": {\n                \"properties\": {\n                  \"identity\": {\n                    \"type\": \"text\",\n                    \"boost\": 1.1,\n                    \"fields\": {\n                      \"keyword\": {\n                        \"type\": \"keyword\",\n                        \"ignore_above\": 256\n                      }\n                    },\n                    \"analyzer\": \"email\",\n                    \"search_analyzer\": \"whitespace_lower\",\n                    \"include_in_all\": true\n                  },\n                  \"name\": {\n                    \"type\": \"text\",\n                    \"fields\": {\n                      \"keyword\": {\n                        \"type\": \"keyword\",\n                        \"ignore_above\": 256\n                      }\n                    },\n                    \"include_in_all\": true\n                  }\n                }\n              },\n              \"@user_description\": {\n                \"properties\": {\n                  \"description\": {\n                    \"type\": \"text\",\n                    \"include_in_all\": true\n                  },\n                  \"email_address\": {\n                    \"type\": \"text\",\n                    \"boost\": 1.1,\n                    \"fields\": {\n                      \"keyword\": {\n                        \"type\": \"keyword\",\n                        \"ignore_above\": 256\n                      }\n                    },\n                    \"analyzer\": \"email\",\n                    \"search_analyzer\": \"simple\",\n                    \"include_in_all\": true\n                  }\n                }\n              },\n              \"@version\": {\n                \"type\": \"text\",\n                \"fields\": {\n                  \"keyword\": {\n                    \"type\": \"keyword\",\n                    \"ignore_above\": 256\n                  }\n                },\n                \"analyzer\": \"version_index\",\n                \"search_analyzer\": \"version_search\"\n              }\n            }\n          },\n          \"date\": {\n            \"type\": \"date\"\n          },\n          \"error\": {\n            \"include_in_all\": true,\n            \"properties\": {\n              \"code\": {\n                \"type\": \"keyword\",\n                \"boost\": 1.1\n              },\n              \"message\": {\n                \"type\": \"text\",\n                \"fields\": {\n                  \"keyword\": {\n                    \"type\": \"keyword\",\n                    \"ignore_above\": 256\n                  }\n                }\n              },\n              \"targetmethod\": {\n                \"type\": \"text\",\n                \"boost\": 1.2,\n                \"fields\": {\n                  \"keyword\": {\n                    \"type\": \"keyword\",\n                    \"ignore_above\": 256\n                  }\n                },\n                \"analyzer\": \"typename\",\n                \"search_analyzer\": \"whitespace_lower\"\n              },\n              \"targettype\": {\n                \"type\": \"text\",\n                \"boost\": 1.2,\n                \"fields\": {\n                  \"keyword\": {\n                    \"type\": \"keyword\",\n                    \"ignore_above\": 256\n                  }\n                },\n                \"analyzer\": \"typename\",\n                \"search_analyzer\": \"whitespace_lower\"\n              },\n              \"type\": {\n                \"type\": \"text\",\n                \"boost\": 1.1,\n                \"fields\": {\n                  \"keyword\": {\n                    \"type\": \"keyword\",\n                    \"ignore_above\": 256\n                  }\n                },\n                \"analyzer\": \"typename\",\n                \"search_analyzer\": \"whitespace_lower\"\n              }\n            }\n          },\n          \"geo\": {\n            \"type\": \"geo_point\"\n          },\n          \"id\": {\n            \"type\": \"keyword\",\n            \"include_in_all\": true\n          },\n          \"idx\": {\n            \"type\": \"object\",\n            \"dynamic\": \"true\"\n          },\n          \"ip\": {\n            \"type\": \"text\",\n            \"analyzer\": \"comma_whitespace\"\n          },\n          \"is_deleted\": {\n            \"type\": \"boolean\"\n          },\n          \"is_first_occurrence\": {\n            \"type\": \"boolean\"\n          },\n          \"is_fixed\": {\n            \"type\": \"boolean\"\n          },\n          \"is_hidden\": {\n            \"type\": \"boolean\"\n          },\n          \"message\": {\n            \"type\": \"text\",\n            \"include_in_all\": true\n          },\n          \"organization_id\": {\n            \"type\": \"keyword\"\n          },\n          \"os\": {\n            \"type\": \"text\",\n            \"fields\": {\n              \"keyword\": {\n                \"type\": \"keyword\",\n                \"ignore_above\": 256\n              }\n            }\n          },\n          \"project_id\": {\n            \"type\": \"keyword\"\n          },\n          \"reference_id\": {\n            \"type\": \"keyword\"\n          },\n          \"source\": {\n            \"type\": \"text\",\n            \"fields\": {\n              \"keyword\": {\n                \"type\": \"keyword\",\n                \"ignore_above\": 256\n              }\n            },\n            \"include_in_all\": true\n          },\n          \"stack_id\": {\n            \"type\": \"keyword\"\n          },\n          \"tags\": {\n            \"type\": \"text\",\n            \"boost\": 1.2,\n            \"fields\": {\n              \"keyword\": {\n                \"type\": \"keyword\",\n                \"ignore_above\": 256\n              }\n            },\n            \"include_in_all\": true\n          },\n          \"type\": {\n            \"type\": \"keyword\"\n          },\n          \"updated_utc\": {\n            \"type\": \"date\"\n          },\n          \"value\": {\n            \"type\": \"double\"\n          }\n        }\n      }\n  }\n}\n```\n\n### Reindex Event data from 1.x into 5.x **Please make sure you update the host name**:\n\n```json\nPOST _reindex\n{\n  \"source\": {\n    \"remote\": {\n      \"host\": \"http://10.0.0.9:9200\"\n    },\n    \"index\": \"events-v1-*\",\n    \"size\": 200\n  },\n  \"dest\": {\n    \"index\": \"events-v1-error\"\n  },\n  \"script\": {\n    \"lang\": \"painless\",\n    \"inline\": \"ctx._index = 'events-v1-' + DateTimeFormatter.ofPattern('yyyy.MM.dd').format(OffsetDateTime.parse(ctx._source.date).toInstant().atZone(ZoneOffset.UTC)); if (ctx._source.updated_utc == null) { ctx._source.updated_utc = ctx._source.created_utc; } if (ctx._source.is_deleted == null) { ctx._source.is_deleted = false; } if (!ctx.containsKey('data') || !(ctx.data.containsKey('@error') || ctx.data.containsKey('@simple_error'))) return null;def types = [];def messages = [];def codes = [];def err = ctx.data.containsKey('@error') ? ctx.data['@error'] : ctx.data['@simple_error'];def curr = err;while (curr != null) { if (curr.containsKey('type'))  types.add(curr.type); if (curr.containsKey('message'))  messages.add(curr.message); if (curr.containsKey('code'))  codes.add(curr.code); curr = curr.inner;}if (ctx.error == null) ctx.error = new HashMap();ctx.error.type = types;ctx.error.message = messages;ctx.error.code = codes;\"\n  }\n}\n```\n\n### Delete the previous Event Template:\n\n```json\nDELETE _template/events-v1\n```\n\n## Upgrading from v2 to v3\n\n_Please note that upgrading from [v2](https://github.com/exceptionless/Exceptionless/releases/tag/v2.0.0) to [v3](https://github.com/exceptionless/Exceptionless/releases/tag/v3.0.0) requires that `Redis` is installed and configured._\n\n1. Download and extract the [v3](https://github.com/exceptionless/Exceptionless/releases/tag/v3.0.0) release to a temp folder.\n2. Update the connection strings in the `App_Data\\JobRunner\\Job.exe.config` config file.\n   1. You'll also need to add a `Migration:MongoConnectionString` connection string for the migration jobs to run.\n\n       ```xml\n       <add name=\"Migration:MongoConnectionString\" connectionString=\"mongodb://localhost/exceptionless\" />\n       ```\n\n3. Open the terminal and run the following jobs to migrate data from previous major versions of Exceptionless. `Jobs.exe` can be found in the `\\wwwroot\\App_Data\\JobRunner\\` folder.\n\n```powershell\nJob.exe -t \"Exceptionless.EventMigration.OrganizationMigrationJob, Exceptionless.EventMigration\" -s \"Exceptionless.Core.Jobs.JobBootstrapper, Exceptionless.Core\"\n```\n\n## Upgrading from v1 to v3\n\n_Please note that upgrading from v1 to [v3](https://github.com/exceptionless/Exceptionless/releases/tag/v3.0.0) requires that `Redis` is installed and configured._\n\n1. Download and extract the [v3](https://github.com/exceptionless/Exceptionless/releases/tag/v3.0.0) release to a temp folder.\n2. Update the connection strings in the `App_Data\\JobRunner\\Job.exe.config` config file.\n   1. You'll also need to add a `Migration:MongoConnectionString` connection string for the migration jobs to run.\n\n       ```xml\n       <add name=\"Migration:MongoConnectionString\" connectionString=\"mongodb://localhost/exceptionless\" />\n       ```\n\n3. Open the terminal and run the following jobs to migrate data from previous major versions of Exceptionless. `Jobs.exe` can be found in the `\\wwwroot\\App_Data\\JobRunner\\` folder.\n\n```powershell\nJob.exe -t \"Exceptionless.EventMigration.StackMigrationJob, Exceptionless.EventMigration\" -s \"Exceptionless.Core.Jobs.JobBootstrapper, Exceptionless.Core\"\nJob.exe -t \"Exceptionless.EventMigration.QueueEventMigrationsJob, Exceptionless.EventMigration\" -s \"Exceptionless.Core.Jobs.JobBootstrapper, Exceptionless.Core\"\nJob.exe -t \"Exceptionless.EventMigration.EventMigrationJob, Exceptionless.EventMigration\" -c -s \"Exceptionless.Core.Jobs.JobBootstrapper, Exceptionless.Core\"\nJob.exe -t \"Exceptionless.EventMigration.OrganizationMigrationJob, Exceptionless.EventMigration\" -s \"Exceptionless.Core.Jobs.JobBootstrapper, Exceptionless.Core\"\n```\n",
    "basename": "upgrading-self-hosted-instance",
    "path": "./content/docs/self-hosting/upgrading-self-hosted-instance.md"
  },
  "setting-log-levels": {
    "title": "Log Levels",
    "order": 12,
    "preview": "Setting log levels allows you to control the flow of data into your …",
    "content": "\n\nSetting log levels allows you to control the flow of data into your Exceptionless account. This is important when you are trying to filter the signal from the noise. In most error monitoring services, you would need to manually configure what log levels are used to send events by customizing your code. With Exceptionless, you can update the log levels used right in the Exceptionless UI. \n\nTo configure your default log levels, go to your project settings page by clicking the project name dropdown in the top left of the header. Hover over your project name, then click the gear icon. Once on the project settings page, click the Settings tab. Here, you will see the default log level options. \n\n![Log Level Settings](img/default_log_levels.png) \n\nYou can change this at the project level or overide the setting on the Stacks page. To override the global log level, click on \"Log Messages\" on the left side of your screen: \n\n![Log Levels](./img/logleveldashboard.png)\n\nNext, you'll want to do one of two things: \n<br/>\n\n### 1. Click on \"New Stacks\" and then click on the log stack you'd like to change.\n<br/>\n\nThe new stacks tab is on the left under Log Messages: \n\n![new stacks](./img/newstacks.png) \n\nWhen you click that link, you can click on the log stack and it will take you to this page: \n\n![log stack](./img/logstack.png)\n\n<br/>\n\n### 2. You can click on a log message event from the Log Messages -> Events dashboard or the All -> Events dashboard, then you can click on a particular log message and click Go To Stack. \n<br/>\nIf you click Events, you'll see all log events (or all events depending on the dashboard you've chosen): \n\n![log message events](./img/logmessageevents.png)\n\nThen, click on the event and you'll be taken to a details page for that event where you will see a \"Go To Stack\" button: \n\n![log details](./img/logdetails.png)\n\n<br />\n\n### Overriding Global Log Levels\n<br />\n\nNow, you can override the global log levels for your account. Simply click the log level dropdown, select the new log level setting you'd like to capture in your stacks, and events of the same type or above will be captured, but any log levels below the type selected will no longer be captured.\n\n![override](./img/override.png)\n\nAs with Data Exclusions, updates to project level and global log level settings will be passed down to the Exceptionless client in near real-time. While the Exceptionless server will catch event that should not be included in your dashboard, the client will catch them based on your configuration and prevent them from ever being sent to the server. Read more about [Project Settings](project-settings.md) here.\n\n---\n\n[Next > De-Duplication](deduplication.md) {.text-right}",
    "basename": "setting-log-levels",
    "path": "./content/docs/setting-log-levels.md"
  },
  "user-sessions": {
    "title": "User Sessions",
    "order": 10,
    "preview": "With user session tracking, you can easily see what a user is doing …",
    "content": "\nWith user session tracking, you can easily see what a user is doing that leads up to an event occurrence, or just see how they are using your app.\n\nEach session has a list of events (feature usages, exceptions, log messages, etc) that the user triggered. Each can be clicked on to drill down.\n\n![Exceptionless User Session Events](img/sessions-event-tab-user-footsteps.jpg)\n\nBrowser and environment information, along with any other data that persists throughout the user session is stored as well.\n\nOnce you set up session tracking, you can find the report under Reports > Sessions, or click on the unique session id in any event's overview tab.\n\n![Exceptionless Sessions Report](img/dashboard-nav.jpg)\n\n## Turn On Session Tracking\n\nSet a default user identity via the following client methods to send the user ID for each event. Once set, it will be applied for all future events.\n\n### C# Set User Identity Example\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.SetUserIdentity(\"UNIQUE_ID_OR_EMAIL_ADDRESS\", \"Display Name\");\n```\n\n### JavaScript Set User Identity Example\n\n```javascript\nexceptionless.ExceptionlessClient.default.config.setUserIdentity('UNIQUE_ID_OR_EMAIL_ADDRESS', 'Display Name');\n```\n\n**Please Note: In WinForms and WPF applications**, a plugin will automatically set the default user to the `Environment.UserName` if the default user hasn’t been already set. Likewise, if you are in a web environment, we will set the default user to the request principal’s identity if the default user hasn’t already been set.\n\n**If you are using WinForms, WPF, or a Browser App**, you can enable sessions by calling the `UseSessions` extension method.\n\n### C# Use Sessions Example\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.Configuration.UseSessions();\n```\n\n### JavaScript Use Sessions Example\n\n```javascript\nexceptionless.ExceptionlessClient.default.config.useSessions();\n```\n\n## Manually Send SessionStart, SessionEnd, and heartbeat Events\n\nYou can use our client API to start, update, or end a session. Just remember, a user identity must be set.\n\n### C# Submit Session Events Example\n\n```csharp\nusing Exceptionless;\nExceptionlessClient.Default.SubmitSessionStart();\nExceptionlessClient.Default.SubmitSessionHeartbeat();\nExceptionlessClient.Default.SubmitSessionEnd();\n```\n\n### JavaScript Submit Session Events Example\n\n```javascript\nexceptionless.ExceptionlessClient.default.submitSessionStart();\nexceptionless.ExceptionlessClient.default.submitSessionHeartbeat();\nexceptionless.ExceptionlessClient.default.submitSessionEnd();\n```\n\n## Disable Heartbeat\n\nIf you would like to disable the near real-time session tracking heartbeat that goes out ever 30 seconds, you can pass `false` as an argument to the `UseSessions()` method.\n\n---\n\n[Next > Notifications](notifications.md) {.text-right}",
    "basename": "user-sessions",
    "path": "./content/docs/user-sessions.md"
  },
  "versioning": {
    "title": "Versioning",
    "order": 7,
    "preview": "You can mark error stacks fixed and they won't show up or notify you …",
    "content": "\nYou can mark error stacks fixed and they won't show up or notify you until they regress!\n\n## How does this work?\n\nWhen an event comes into Exceptionless, we figure out what makes it unique and place it into a stack of similar events. This means that an error comes in, it will be placed in a stack of similar error events. All events may contain an application version, this can be used to track what versions of an application are causing errors or being actively used.\n\n## How do I specify an application version?\n\nAn application version will try and be resolved if possible, but it's a good idea to specify a version if you can. Please view the client specific documentation below to learn more about setting an app version.\n\n## Choose your Client\n\n* [.NET](clients/dotnet/index.md)\n* [JavaScript / Node.js](clients/javascript/client-configuration.md)\n\n## What does mark fixed do?\n\n![Exceptionless Mark Fixed](img/versioning.png)\n\nWhen you mark a stack as fixed, the following meta data is recorded on the stack:\n\n* when the stack was fixed\n* and **optionally** the semantic version that you fixed this behavior in.\n\n> **NOTE:** If you are using a **four-part version number** (E.G., `1.2.3.4`), you'll need to enter it as `1.2.3-4`. We will automatically handle this conversion when processing events.\n\nNext, all stack event occurrences are marked as fixed and will be hidden from all dashboards. You can show fixed events in dashboards by updating the search box with `*` or `fixed:true`.\n\nThis meta data is then inspected when an matching event is processed to determine if the stack and all occurrences should be regressed (_marked not fixed_). There are two scenarios where a stack will be marked as regressed:\n\n1. If no fixed in version is specified, any occurrence with a date newer than the date the stack was marked as fixed.\n2. If a fixed in version is specified, any occurrence that has a newer version specified (Example: `1.0.0` > `1.0.0-beta`).\n\n---\n\n[Next > Reference Ids](references-ids.md) {.text-right}\n",
    "basename": "versioning",
    "path": "./content/docs/versioning.md"
  }
}
